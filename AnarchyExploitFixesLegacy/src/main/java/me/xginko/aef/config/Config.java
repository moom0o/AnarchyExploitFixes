package me.xginko.aef.config;

import com.cryptomorin.xseries.XSound;
import io.github.thatsmusic99.configurationmaster.api.ConfigFile;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import io.papermc.lib.PaperLib;
import me.xginko.aef.AnarchyExploitFixes;
import org.bukkit.ChatColor;
import org.bukkit.Sound;

import java.io.File;
import java.time.Duration;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class Config {

    private final ConfigFile config;
    public final Locale default_lang;
    public final String cmd_say_format;
    public final Sound elytra_too_fast_sound;
    public final Duration tps_cache_duration;
    public final long elytra_speed_calc_period;
    public final int nether_ceiling_max_y, nether_floor_min_y, overworld_floor_min_y, elytra_spawn_radius;
    public final boolean auto_lang, packets_disabled, connectionMsgsAreOnByDefault,
            cmd_say_enabled, cmd_help_enabled, cmd_toggleConMsgs_enabled,
            elytra_enable_at_spawn, elytra_enable_global, elytra_enable_netherceiling,
            elytra_actionbar_enabled, elytra_show_chunk_age, elytra_play_too_fast_sound,
            elytra_teleport_back, elytra_calculate_3D;

    public Config() throws Exception {
        // Load config.yml with ConfigMaster
        this.config = ConfigFile.loadConfig(new File(AnarchyExploitFixes.getInstance().getDataFolder(), "config.yml"));
        config.set("config-version", 1.1);

        // Pre-structure to force order
        structureConfig();

        // Language Settings
        this.default_lang = Locale.forLanguageTag(getString("language.default-language", "en_us",
                "The default language that will be used if auto-language is false\n" +
                "or no matching language file was found.")
                .replace("_", "-"));
        this.auto_lang = getBoolean("language.auto-language", true,
                "If set to true, will display messages based on client language");

        // General Settings
        this.tps_cache_duration = Duration.ofMillis(Math.max(1, getInt("general.max-tps-check-interval-in-ticks", 20,
                "The time in ticks (1 sec = 20 ticks) a checked tps will be cached \n" +
                "by the plugin.")) * 50L);
        this.packets_disabled = getBoolean("general.disable-all-packet-listeners", false,
                "In case packet modules are causing trouble, you can disable them here.");
        this.nether_ceiling_max_y = getInt("general.nether-ceiling-y", 127,
                "The Y-level at which the nether ceiling generates the last layer\n" +
                "of bedrock on your server.");
        this.nether_floor_min_y = getInt("general.nether-floor-y", 0,
                "The Y-level at which the nether floor generates the last layer\n" +
                "of bedrock on your server.");
        this.overworld_floor_min_y = getInt("general.overworld-floor-y", PaperLib.getMinecraftVersion() > 17 ? -64 : 0,
                "The Y-level at which the overworld floor generates the last layer\n" +
                "of bedrock on your server.");
        this.cmd_say_enabled = getBoolean("general.commands.say.enable", false);
        this.cmd_say_format = ChatColor.translateAlternateColorCodes('&', getString("general.commands.say.format", "&7Server: &6%message%"));
        this.cmd_help_enabled = getBoolean("general.commands.help.enable", false,
                "Help command that shows a small command overview for players.");
        this.cmd_toggleConMsgs_enabled = getBoolean("general.commands.toggleconnectionmsgs.enable", true,
                "If you don't use join leave/messages, you can set this to false.");
        config.addComment("general.commands",
                "A server restart is required when changing a command's enable status!");

        // Elytra Speed
        this.elytra_speed_calc_period = getInt("elytra.elytra-speed.check-period-ticks", 10,
                "The period in ticks players will be checked to determine their speed.");
        this.elytra_calculate_3D = getBoolean("elytra.elytra-speed.calculate-3D-speed", false,
                "If set to false, will only calculate 2-Dimensional speed\n" +
                "without taking height changes into consideration.");
        this.elytra_actionbar_enabled = getBoolean("elytra.elytra-speed.display-actionbar", true,
                "Display info in Actionbar while flying.");
        this.elytra_show_chunk_age = getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true,
                "Inform flying player if they are in old or new chunks.");
        this.elytra_play_too_fast_sound = getBoolean("elytra.elytra-speed.play-sound-when-too-fast", true,
                "Plays XP pickup sound to alert players when theyre going\n" +
                "above the limit.");
        String configuredSound = getString("elytra.elytra-speed.sound", XSound.ENTITY_EXPERIENCE_ORB_PICKUP.name());
        Sound parsedSound;
        try {
            parsedSound = XSound.valueOf(configuredSound).parseSound();
        } catch (IllegalArgumentException e) {
            AnarchyExploitFixes.prefixedLogger().warn("<elytra-speed> Sound '"+configuredSound+"' does not exist in XSound. Using default.");
            parsedSound = XSound.ENTITY_EXPERIENCE_ORB_PICKUP.parseSound();
        }
        this.elytra_too_fast_sound = parsedSound;
        this.elytra_teleport_back = getBoolean("elytra.elytra-speed.teleport-instead-of-canceling-movement", false,
                "Recommended to leave false if you dont experience any issues.");
        this.elytra_enable_global = getBoolean("elytra.elytra-speed.Global-Settings.enable", true);
        this.elytra_enable_at_spawn = getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.elytra_spawn_radius = getInt("elytra.elytra-speed.At-Spawn.radius", 3000,
                "Radius in blocks around 00 that should count as spawn.");
        this.elytra_enable_netherceiling = getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);

        // Misc
        config.addDefault("misc.join-leave-messages.enable", true); // add default here so enable option shows up first.
        this.connectionMsgsAreOnByDefault = getBoolean("misc.join-leave-messages.connection-messages-on-by-default", true,
                "If set to true, players will see join/leave messages by default\n" +
                "and enter /toggleconnectionmsgs to disable them.\n" +
                "If set to false will work the other way around.");
        config.addDefault("misc.join-leave-messages.show-in-console", false); // add default here so show-in-console option is not misplaced.
    }

    public void saveConfig() {
        try {
            config.save();
        } catch (Exception e) {
            AnarchyExploitFixes.prefixedLogger().error("Failed to save config file!", e);
        }
    }

    private void structureConfig() {
        createTitledSection("Language", "language");
        createTitledSection("General", "general");
        createTitledSection("Miscellaneous", "misc");
        createTitledSection("Chat", "chat");
        createTitledSection("Elytra", "elytra");
        createTitledSection("Chunk Limits", "chunk-limits");
        createTitledSection("Lag Preventions", "lag-preventions");
        createTitledSection("Patches", "patches");
        createTitledSection("Illegals", "illegals");
        createTitledSection("Dupe Preventions", "dupe-preventions");
        createTitledSection("Preventions", "preventions");
        createTitledSection("Combat", "combat");
        createTitledSection("Bedrock", "bedrock");
    }

    public void createTitledSection(String title, String path) {
        config.addSection(title);
        config.addDefault(path, null);
    }

    public boolean getBoolean(String path, boolean def, String comment) {
        config.addDefault(path, def, comment);
        return config.getBoolean(path, def);
    }

    public boolean getBoolean(String path, boolean def) {
        config.addDefault(path, def);
        return config.getBoolean(path, def);
    }

    public String getString(String path, String def, String comment) {
        config.addDefault(path, def, comment);
        return config.getString(path, def);
    }

    public String getString(String path, String def) {
        config.addDefault(path, def);
        return config.getString(path, def);
    }

    public double getDouble(String path, double def, String comment) {
        config.addDefault(path, def, comment);
        return config.getDouble(path, def);
    }

    public double getDouble(String path, double def) {
        config.addDefault(path, def);
        return config.getDouble(path, def);
    }

    public int getInt(String path, int def, String comment) {
        config.addDefault(path, def, comment);
        return config.getInteger(path, def);
    }

    public int getInt(String path, int def) {
        config.addDefault(path, def);
        return config.getInteger(path, def);
    }

    public List<String> getList(String path, List<String> def, String comment) {
        config.addDefault(path, def, comment);
        return config.getStringList(path);
    }

    public List<String> getList(String path, List<String> def) {
        config.addDefault(path, def);
        return config.getStringList(path);
    }

    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
        config.addDefault(path, null);
        config.makeSectionLenient(path);
        defaultKeyValue.forEach((string, object) -> config.addExample(path+"."+string, object));
        return config.getConfigSection(path);
    }

    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue, String comment) {
        config.addDefault(path, null, comment);
        config.makeSectionLenient(path);
        defaultKeyValue.forEach((string, object) -> config.addExample(path+"."+string, object));
        return config.getConfigSection(path);
    }

    public void addComment(String path, String comment) {
        config.addComment(path, comment);
    }
}
