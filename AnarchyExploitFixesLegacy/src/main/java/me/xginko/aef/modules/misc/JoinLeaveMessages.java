package me.xginko.aef.modules.misc;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class JoinLeaveMessages extends AEFModule implements Listener {

    private final boolean showInConsole, firstJoinEnabled;

    public JoinLeaveMessages() {
        super("misc.join-leave-messages", false);
        config.addComment(configPath + ".enable",
                "If you want to hide yourself or someone else when logging\n" +
                "into the game, use these permissions:\n" +
                AEFPermission.SILENT_JOIN.string() + ", " + AEFPermission.SILENT_LEAVE.string());
        this.showInConsole = config.getBoolean(configPath + ".show-in-console", false);
        this.firstJoinEnabled = config.getBoolean(configPath + ".first-join-messages.enable", false);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        event.setJoinMessage(null);
        final Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPermission(AEFPermission.SILENT_JOIN.string())) return;
        if (firstJoinEnabled && !joiningPlayer.hasPlayedBefore()) return;

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            AnarchyExploitFixes.datastore().getJoinLeaveEnabled(onlinePlayer.getUniqueId()).thenAccept(enabled -> {
                if (enabled) {
                    onlinePlayer.sendMessage(AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).misc_joinMessage
                            .replace("%player%", joiningPlayer.getName()));
                }
            });
        }

        if (showInConsole)
            AnarchyExploitFixes.unprefixedLogger().info("{} ({})", AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).misc_joinMessage
                    .replace("%player%", joiningPlayer.getName()), joiningPlayer.getLocale());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerLeaveEvent(PlayerQuitEvent event) {
        event.setQuitMessage(null);
        final Player leavingPlayer = event.getPlayer();
        if (leavingPlayer.hasPermission(AEFPermission.SILENT_LEAVE.string())) return;

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (onlinePlayer.getUniqueId().equals(leavingPlayer.getUniqueId())) continue;
            AnarchyExploitFixes.datastore().getJoinLeaveEnabled(onlinePlayer.getUniqueId()).thenAccept(enabled -> {
                if (enabled) {
                    onlinePlayer.sendMessage(AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).misc_leaveMessage
                            .replace("%player%", leavingPlayer.getName()));
                }
            });
        }

        if (showInConsole)
            AnarchyExploitFixes.unprefixedLogger().info("{} ({})", AnarchyExploitFixes.getLang(leavingPlayer.getLocale()).misc_leaveMessage
                    .replace("%player%", leavingPlayer.getName()), leavingPlayer.getLocale());
    }
}
