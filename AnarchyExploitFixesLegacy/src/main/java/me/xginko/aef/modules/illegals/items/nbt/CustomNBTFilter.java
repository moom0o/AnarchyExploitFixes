package me.xginko.aef.modules.illegals.items.nbt;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.IllegalHandling;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class CustomNBTFilter extends IllegalItemModule {

    private final Set<String> illegalTags;
    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, checkStored;

    public CustomNBTFilter() {
        super("illegals.nbt.ban-custom-tags", false, AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM.string() + "\n" +
                        "Deletes items that have one or more of the configured tags.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        this.illegalTags = new HashSet<>(config.getList(configPath + ".tags", Collections.singletonList("dmg"),
                "The exact, case sensitive value of the nbt tag."));
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items", Collections.singletonList("GOLDEN_APPLE"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || MaterialUtil.AIR.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            String nbtItemToString = ItemUtil.getNBTString(itemStack);
            for (String tag : illegalTags) {
                if (nbtItemToString.contains(tag)) {
                    return ItemLegality.ILLEGAL;
                }
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
