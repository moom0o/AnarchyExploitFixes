package me.xginko.aef.modules.lagpreventions.regionalactivity;

import com.cryptomorin.xseries.XMaterial;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.GameMode;
import org.bukkit.Material;
import org.bukkit.event.block.BlockEvent;

import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;

/**
 *  Credits to the initial idea of measuring burst activity within a certain region
 *  of the world go to kumori (Soft1k) of 3b3t.org.
 */
public abstract class RegionalBlockActivityModule extends RegionalActivityModule {

    protected final Map<Material, Integer> typedActivityLimit = new EnumMap<>(Material.class);

    public RegionalBlockActivityModule(
            String subConfigPath, boolean defEnabled, boolean deflogEnabled, int totalLimit, double defCheckRadius,
            int defPauseMillis, int defCacheMillis, double defPauseTPS, double defPauseMSPT,
            Map<XMaterial, Integer> defaultTypeSettings
    ) {
        this(subConfigPath, defEnabled, deflogEnabled, totalLimit, defCheckRadius, defPauseMillis, defCacheMillis,
                defPauseTPS, defPauseMSPT, defaultTypeSettings, null);
    }

    public RegionalBlockActivityModule(
            String subConfigPath, boolean defEnabled, boolean deflogEnabled, int totalLimit,
            double defCheckRadius, int defPauseMillis, int defCacheMillis, double defPauseTPS, double defPauseMSPT,
            Map<XMaterial, Integer> defaultTypeSettings, String comment) {
        super(subConfigPath, defEnabled, deflogEnabled, totalLimit, defCheckRadius, defPauseMillis, defCacheMillis, defPauseTPS, defPauseMSPT, comment);
        Map<String, Object> defaultKV = new HashMap<>(defaultTypeSettings.size());
        for (Map.Entry<XMaterial, Integer> entry : defaultTypeSettings.entrySet()) {
            if (entry.getKey().isSupported()) {
                defaultKV.put(entry.getKey().get().name(), entry.getValue());
            }
        }
        ConfigSection typedSection = config.getConfigSection(configPath + ".typed-limits", defaultKV,
                "Set activity limits per Material (BlockType)." +
                "Note that you cannot set a value higher than the one configured in total-limit.");
        for (String configuredMaterial : typedSection.getKeys(false)) {
            try {
                typedActivityLimit.put(Material.valueOf(configuredMaterial), Integer.parseInt(typedSection.getString(configuredMaterial)));
            } catch (NumberFormatException e) {
                notRecognized(Integer.class, typedSection.getString(configuredMaterial));
            }catch (IllegalArgumentException e) {
                notRecognized(GameMode.class, configuredMaterial);
            }
        }
    }

    protected <T extends BlockEvent> boolean shouldCancelBlockEvent(T blockEvent) {
        return shouldCancelEvent(blockEvent, blockEvent.getBlock().getLocation()) || shouldCancelBecauseTypeActivity(blockEvent);
    }

    protected <T extends BlockEvent> boolean shouldCancelBecauseTypeActivity(T blockEvent) {
        if (!typedActivityLimit.containsKey(blockEvent.getBlock().getType())) {
            return false;
        }

        int typeLimit = typedActivityLimit.get(blockEvent.getBlock().getType());
        RegionData regionData = getRegionData(blockEvent.getBlock().getLocation());
        RegionData.ActivityData activityData = regionData.getBlockActivityData(blockEvent.getBlock().getType());

        if (activityData.resumeTimeMillis.get() > System.currentTimeMillis()) {
            if (logIsEnabled) {
                info(   "Cancelling " + blockEvent.getClass().getSimpleName() + " for " + blockEvent.getBlock().getType().name() +
                        " at " + LocationUtil.toString(blockEvent.getBlock().getLocation()) + " because it exceeded its " +
                        "activity (limit: " + typeLimit + ").");
            }
            return true;
        }

        if (activityData.activityCount.incrementAndGet() > typeLimit) {
            if (logIsEnabled) {
                warn(   "Disabling " + blockEvent.getBlock().getType().name() + " in a radius of " + checkRadius +
                        " blocks from center at x=" + regionData.region.getCenterX() + ", z=" + regionData.region.getCenterZ() +
                        " in world " + blockEvent.getBlock().getWorld().getName() + " for " + pauseTimeMillis +
                        "ms, because of too high activity within the configured timeframe: " +
                        activityData.activityCount + " (limit: " + typeLimit + ")");
            }
            activityData.resumeTimeMillis.set(System.currentTimeMillis() + pauseTimeMillis);
            activityData.activityCount.set(0); // Reset count when region is cooling down
            return true;
        }

        return false;
    }
}
