package me.xginko.aef.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.utils.permissions.AEFPermission;
import me.xginko.aef.utils.enums.IllegalHandling;
import me.xginko.aef.utils.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.MaterialUtil;
import me.xginko.aef.utils.PlatformUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class Unbreakables extends IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean skipZeroDurability, useWhitelist, blacklistMode, checkStored;

    public Unbreakables() {
        super("illegals.revert-unbreakables", false, AEFPermission.BYPASS_ILLEGAL_UNBREAKABLE,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_UNBREAKABLE.node() + "\n" +
                        "Deletes and prevents usage of unbreakable items.\n" +
                        "This can be anything from items with illegal damage attributes to\n" +
                        "Metadata/NBT tags.\n" +
                        "Note: Due to the limitations of the API, we can only fully prevent\n" +
                        "usage of these items by deleting them.");
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false,
                "Will delete shulkers and bundles if they contain unbreakables.");
        this.skipZeroDurability = config.getBoolean(configPath + ".skip-zero-durability", PlatformUtil.getMinecraftVersion() >= 16,
                "Make sure to keep enabled on 1.16+, otherwise netherite tools\n" +
                "will mistakenly be set to max durability, due to some bug in paper.");
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items",
                        Collections.singletonList(XMaterial.DIAMOND_CHESTPLATE.get().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || MaterialUtil.AIR.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (skipZeroDurability && itemStack.getType().getMaxDurability() == 0) {
                return ItemLegality.LEGAL;
            }

            if (itemStack.getDurability() > itemStack.getType().getMaxDurability() || itemStack.getDurability() < 0) {
                return ItemLegality.ILLEGAL;
            }

            if (itemStack.hasItemMeta() && itemStack.getItemMeta().isUnbreakable()) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return;

        switch (legality) {
            case CONTAINS_ILLEGAL:
                itemStack.setAmount(0);
                return;
            case ILLEGAL:
                ItemMeta itemMeta = itemStack.getItemMeta();

                if (itemMeta.isUnbreakable()) {
                    itemMeta.setUnbreakable(false);
                    itemStack.setItemMeta(itemMeta);
                }

                if (skipZeroDurability && itemStack.getType().getMaxDurability() == 0) {
                    return;
                }

                if (itemStack.getDurability() > itemStack.getType().getMaxDurability() || itemStack.getDurability() < 0) {
                    itemStack.setDurability(itemStack.getType().getMaxDurability());
                    itemStack.setItemMeta(itemMeta);
                }
        }
    }
}
