package me.xginko.aef.modules.bedrock;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.WorldUtil;
import org.bukkit.World;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class FillNetherFloorOnChunkload extends AEFModule implements Listener {

    private final Set<String> exemptedWorlds;
    private final double pauseTPS;
    private final boolean alsoCheckNewChunks, pauseOnLowTPS;

    public FillNetherFloorOnChunkload() {
        super("bedrock.fill-in-bedrock.nether-floor.fill-on-chunkload");
        this.alsoCheckNewChunks = config.getBoolean(configPath + ".also-check-new-chunks", false,
                "Recommended to leave off. Only useful if world generation is broken.");
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                Arrays.asList("exampleworld", "exampleworld2"),
                "Uses the exact name of the world's folder in your server directory."));
        this.pauseOnLowTPS = config.getBoolean(configPath + ".pause-on-low-tps", true);
        this.pauseTPS = config.getDouble(configPath + ".pause-tps", 16.0,
                "The TPS at which bedrock filling will pause to avoid adding to the lag.");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (ChunkUtil.isRetrievalUnsafe(event.getChunk())) return;
        if (!alsoCheckNewChunks && event.isNewChunk()) return;
        final World world = event.getWorld();
        if (world.getEnvironment() != World.Environment.NETHER) return;
        if (exemptedWorlds.contains(world.getName())) return;

        if (!pauseOnLowTPS || AnarchyExploitFixes.getTickReporter().getTPS() >= pauseTPS) {
            ChunkUtil.createBedrockLayer(event.getChunk(), WorldUtil.getMinWorldHeight(world));
        }
    }
}
