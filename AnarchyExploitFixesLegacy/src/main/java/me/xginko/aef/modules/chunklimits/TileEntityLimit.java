package me.xginko.aef.modules.chunklimits;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.block.BlockState;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.scheduler.BukkitTask;

public class TileEntityLimit extends AEFModule implements Runnable, Listener {

    private final long checkPeriod;
    private final int maxTileEntities;
    private final boolean logIsEnabled;

    private BukkitTask bukkitTask;

    public TileEntityLimit() {
        super("chunk-limits.entity-limits.tile-entity-limit", false);
        config.addComment(configPath + ".enable",
                "Limit the amount of tile entities in a chunk to prevent lag.");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", true);
        this.maxTileEntities = config.getInt(configPath + ".max-tile-entities-per-chunk", 100);
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 20);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        bukkitTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (bukkitTask != null) {
            bukkitTask.cancel();
            bukkitTask = null;
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                BlockState[] tileEntities = chunk.getTileEntities();
                int amountToRemove = tileEntities.length - maxTileEntities;
                if (amountToRemove <= 0) return;

                for (int i = 0; i < amountToRemove; i++) {
                    tileEntities[i].setType(XMaterial.AIR.get());
                    tileEntities[i].update(true, false);

                    if (logIsEnabled)
                        info("Removed tile entity at " + LocationUtil.toString(tileEntities[i].getLocation()) +
                                " because reached limit of " + maxTileEntities);
                }
            }
        }
    }
}
