package me.xginko.aef.modules.patches.commandsign;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.CachingPermTool;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

public class CommandSign extends AEFModule implements Listener {

    private final Listener signCommandListener;

    public CommandSign() {
        super("patches.prevent-command-sign", true,
                "Patch signs that have run_command NBT tags attached, allowing the \n" +
                        "to run a command with operator permissions on click. \n" +
                        "Recommended to enable if you had a rogue admin or backdoor incident.");
        this.signCommandListener = SignCommandListener.isSupported() ? new SignCommandListener() : this;
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(signCommandListener, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(signCommandListener);
    }

    // Fallback listener, just cancels any right-clicking on signs
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        if (!MaterialUtil.SIGNS.contains(event.getClickedBlock().getType())) return;

        if (!CachingPermTool.hasPermission(AEFPermission.BYPASS_PREVENTION_COMMANDSIGN, event.getPlayer())) {
            event.setCancelled(true);
        }
    }
}
