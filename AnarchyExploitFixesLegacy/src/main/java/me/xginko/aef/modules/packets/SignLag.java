package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientUpdateSign;
import me.xginko.aef.utils.models.ExpiringSet;

import java.time.Duration;
import java.util.UUID;

public class SignLag extends PacketModule {

    private final long cooldownMillis;
    private final int line_char_limit, total_char_limit;
    private final boolean log, kick;

    private ExpiringSet<UUID> cooldowns;

    public SignLag() {
        super("patches.sign-lag", true, PacketListenerPriority.HIGHEST,
                "Patches a lag exploit that involves sending specific oversized \n" +
                "sign edit packets.");
        this.cooldownMillis = Math.max(1, config.getInt(configPath + ".packet-delay-in-ticks", 10,
                "How many ticks a player needs to wait to be able to send\n" +
                "another sign update packet (renaming or writing).")) * 50L;
        this.line_char_limit = config.getInt(configPath + ".line-character-limit", 80,
                "Vanilla limit is 384 characters per line, which is too much.");
        this.total_char_limit = config.getInt(configPath + ".total-char-limit", 384,
                "General char limit for all lines combined.");
        this.log = config.getBoolean(configPath + ".log", false);
        this.kick = config.getBoolean(configPath + ".kick-player", false);
    }

    @Override
    public void enable() {
        cooldowns = new ExpiringSet<>(Duration.ofMillis(cooldownMillis));
        PacketEvents.getAPI().getEventManager().registerListener(asAbstract);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(asAbstract);
        if (cooldowns != null) {
            cooldowns.clear();
            cooldowns.cleanUp();
            cooldowns = null;
        }
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.isCancelled()) return;
        if (event.getPacketType() != PacketType.Play.Client.UPDATE_SIGN) return;

        if (cooldowns.contains(event.getUser().getUUID())) {
            event.setCancelled(true);
            return;
        } else {
            cooldowns.add(event.getUser().getUUID());
        }

        int sum = 0;

        for (String line : new WrapperPlayClientUpdateSign(event).getTextLines()) {
            int chars = line.length();

            if (chars > line_char_limit) {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
                return;
            }

            sum += chars;

            if (sum > total_char_limit) {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
                return;
            }
        }
    }
}
