package me.xginko.aef.modules.chunklimits;

import com.cryptomorin.xseries.XEntityType;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.MaterialUtil;
import me.xginko.aef.utils.models.ChunkUID;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Item;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ItemSpawnEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.scheduler.BukkitTask;

import java.time.Duration;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class DroppedItemLimit extends AEFModule implements Listener, Runnable {

    private final Cache<ChunkUID, Integer> scheduledChecks;
    private final Set<Material> whitelistedTypes;
    private final long checkPeriod, cleanupDelay;
    private final int maxDroppedItemsPerChunk;
    private final boolean logIsEnabled, usingWhitelist, onChunkLoad;
    private BukkitTask bukkitTask;

    public DroppedItemLimit() {
        super("chunk-limits.entity-limits.dropped-item-limit", false,
                "Limit the amount of dropped items in a chunk to combat lag.\n" +
                "Be aware this does not prioritize items by value or anything,\n" +
                "it just deletes whatever happens to get over the limit during\n" +
                "counting.");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", true);
        this.maxDroppedItemsPerChunk = config.getInt(configPath + ".max-dropped-items-per-chunk", 200);
        this.cleanupDelay = Math.max(1, config.getInt(configPath + ".post-item-drop-check-delay", 60,
                "The delay in ticks the plugin will wait after an item in a chunk\n" +
                        "has dropped before the check logic will run.\n" +
                        "This improves performance as there will be no check for each single\n" +
                        "item entity that spawns."));
        this.scheduledChecks = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(cleanupDelay * 50L)).build();
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 1200,
                        "The period in ticks in which all loaded chunks should be regularly\n" +
                        "checked. Keep in mind: A lower number provides more accuracy but is\n" +
                        "also worse for performance.");
        this.onChunkLoad = config.getBoolean(configPath + ".check-on-chunk-load", true,
                "Runs item check when a chunk is loaded.");
        this.usingWhitelist = config.getBoolean(configPath + ".whitelist-specific-item-types", false);
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-types",
                MaterialUtil.SHULKER_BOXES.stream().map(Enum::name).sorted().collect(Collectors.toList()),
                "Check the paper api for correct Material enums:\n" +
                        "https://jd.papermc.io/paper/1.20.6/org/bukkit/Material.html\n" +
                        "Make sure your minecraft version is matching as well.")
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        bukkitTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (bukkitTask != null) bukkitTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onItemDrop(ItemSpawnEvent event) {
        Chunk chunk = event.getEntity().getChunk();
        final ChunkUID chunkUID = ChunkUID.of(chunk);
        // Don't create a check task for each spawning item
        scheduledChecks.get(chunkUID, k ->
                plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
                    if (!chunk.isLoaded()) return;

                    int droppedItemCount = 0;

                    for (Entity entity : chunk.getEntities()) {
                        if (entity.getType() != XEntityType.ITEM.get()) continue;

                        droppedItemCount++;
                        if (droppedItemCount <= maxDroppedItemsPerChunk) continue;

                        if (usingWhitelist && whitelistedTypes.contains(((Item) entity).getItemStack().getType())) continue;

                        entity.remove();
                        if (logIsEnabled) info("Removed dropped item at " + LocationUtil.toString(entity.getLocation()) +
                                " because reached limit of " + maxDroppedItemsPerChunk);
                    }
                }, cleanupDelay));
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (!onChunkLoad || event.isNewChunk()) return;
        if (ChunkUtil.isRetrievalUnsafe(event.getChunk())) return;

        int droppedItemCount = 0;

        for (Entity entity : event.getChunk().getEntities()) {
            if (entity.getType() != XEntityType.ITEM.get()) continue;

            droppedItemCount++;
            if (droppedItemCount <= maxDroppedItemsPerChunk) continue;
            if (usingWhitelist && whitelistedTypes.contains(((Item) entity).getItemStack().getType())) continue;

            entity.remove();
            if (logIsEnabled) info("Removed dropped item at " + LocationUtil.toString(entity.getLocation()) +
                    " because reached limit of " + maxDroppedItemsPerChunk);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;
                if (!chunk.isLoaded()) continue;

                int droppedItemCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    if (entity.getType() != XEntityType.ITEM.get()) continue;

                    droppedItemCount++;
                    if (droppedItemCount <= maxDroppedItemsPerChunk) continue;
                    if (usingWhitelist && whitelistedTypes.contains(((Item) entity).getItemStack().getType())) continue;

                    entity.remove();
                    if (logIsEnabled) info("Removed dropped item at " + LocationUtil.toString(entity.getLocation()) +
                            " because reached limit of " + maxDroppedItemsPerChunk);
                }
            }
        }
    }
}
