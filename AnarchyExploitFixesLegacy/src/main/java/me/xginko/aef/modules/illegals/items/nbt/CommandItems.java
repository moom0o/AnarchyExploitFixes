package me.xginko.aef.modules.illegals.items.nbt;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.inventory.ItemStack;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

public class CommandItems extends IllegalItemModule {

    private final boolean checkStored;

    public CommandItems() {
        super("illegals.nbt.command-items", false, AEFPermission.BYPASS_ILLEGAL_NBT_COMMAND_ITEM,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_NBT_COMMAND_ITEM.string() + "\n" +
                        "Deletes items with commands in their NBT data that run as operator.\n" +
                        "These can only be created by players with creative access.\n" +
                        "Most common items are books, since it allows storing multiple commands.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || MaterialUtil.AIR.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (!checkStored && MaterialUtil.INVENTORY_HOLDERS.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (ItemUtil.getNBTString(itemStack).contains("run_command")) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
