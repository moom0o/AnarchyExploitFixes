package me.xginko.aef.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.IllegalHandling;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class InapplicableEnchants extends IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, checkStored;

    public InapplicableEnchants() {
        super("illegals.enchantments.inapplicable-enchants", false, AEFPermission.BYPASS_ILLEGAL_ENCHANT_INAPPLICABLE,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_ENCHANT_INAPPLICABLE.string() + "\n" +
                        "Reverts or prevents usage of ItemStacks with Enchantments that\n" +
                        "cannot be applied to that ItemStack in vanilla survival minecraft.\n" +
                        "Examples: A helmet with sharpness or a block of stone with fortune.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items",
                        Collections.singletonList(XMaterial.GOLDEN_APPLE.get().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || MaterialUtil.AIR.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            for (Map.Entry<Enchantment, Integer> enchant : itemStack.getEnchantments().entrySet()) {
                if (!enchant.getKey().canEnchantItem(itemStack)) {
                    return ItemLegality.ILLEGAL;
                }
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (legality == ItemLegality.LEGAL) return;
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        if (legality == ItemLegality.CONTAINS_ILLEGAL) {
            itemStack.setAmount(0);
            return;
        }

        for (Map.Entry<Enchantment, Integer> enchant : itemStack.getEnchantments().entrySet()) {
            if (!enchant.getKey().canEnchantItem(itemStack)) {
                itemStack.removeEnchantment(enchant.getKey());
            }
        }
    }
}
