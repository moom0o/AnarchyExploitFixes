package me.xginko.aef.modules.lagpreventions.agelimits;

import com.cryptomorin.xseries.XEntityType;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.scheduler.BukkitTask;

import java.util.EnumMap;
import java.util.Map;
import java.util.TreeMap;

public class CustomAgeLimits extends AEFModule implements Runnable, Listener {

    private final Map<EntityType, Integer> entityLimits = new EnumMap<>(EntityType.class);
    private final long checkPeriod;
    private final boolean logIsEnabled;
    private BukkitTask bukkitTask;

    public CustomAgeLimits() {
        super("lag-preventions.entity-age-limits.custom-limits");
        config.addComment(configPath + ".enable",
                "Kill certain entities after a custom amount of ticks lived.");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", false);
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 1200,
                "Check all loaded chunks every x ticks.");

        Map<XEntityType, Integer> defaults = new EnumMap<>(XEntityType.class);
        defaults.put(XEntityType.ARROW, 120);
        defaults.put(XEntityType.SPECTRAL_ARROW, 120);
        defaults.put(XEntityType.FALLING_BLOCK, 160);
        defaults.put(XEntityType.WITHER_SKULL, 100);
        defaults.put(XEntityType.SNOWBALL, 100);

        Map<String, Object> versionDefaults = new TreeMap<>();
        for (Map.Entry<XEntityType, Integer> entry : defaults.entrySet()) {
            if (entry.getKey().isSupported()) {
                versionDefaults.put(entry.getKey().get().name(), entry.getValue());
            }
        }

        ConfigSection section = config.getConfigSection(configPath + ".limited-types", versionDefaults,
                "Check the paper api for correct EntityType enums:\n" +
                        "https://jd.papermc.io/paper/1.20/org/bukkit/entity/EntityType.html\n" +
                        "Make sure your minecraft version is matching as well.");
        for (String configuredEntity : section.getKeys(false)) {
            try {
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                Integer maxAmountPerChunk = Integer.parseInt(section.getString(configuredEntity));
                entityLimits.put(limitedEntity, maxAmountPerChunk);
            } catch (NumberFormatException e) {
                notRecognized(Integer.class, configuredEntity);
            } catch (IllegalArgumentException e) {
                notRecognized(Material.class, configuredEntity);
            }
        }
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        bukkitTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (bukkitTask != null) bukkitTask.cancel();
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Entity entity : world.getEntities()) {
                if (entityLimits.containsKey(entity.getType()) && entity.getTicksLived() >= entityLimits.get(entity.getType())) {
                    entity.remove();
                    if (logIsEnabled) info("Removed " + entity.getType().name() + " due to old age.");
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;
        if (event.getChunk().getX() > 1875000 || event.getChunk().getZ() > 1875000 || event.getChunk().getX() < -1875000 || event.getChunk().getZ() < -1875000) return;

        for (Entity entity : event.getChunk().getEntities()) {
            if (entityLimits.containsKey(entity.getType()) && entity.getTicksLived() >= entityLimits.get(entity.getType())) {
                entity.remove();
                if (logIsEnabled) info("Removed " + entity.getType().name() + " due to old age.");
            }
        }
    }
}
