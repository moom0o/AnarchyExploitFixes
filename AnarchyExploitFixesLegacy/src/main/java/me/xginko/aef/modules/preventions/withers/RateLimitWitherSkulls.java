package me.xginko.aef.modules.preventions.withers;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.entity.Wither;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ProjectileLaunchEvent;

import java.time.Duration;
import java.util.UUID;

public class RateLimitWitherSkulls extends AEFModule implements Listener {

    private final long playerCooldownMillis, otherCooldownMillis, notargetCooldownMillis;

    private ExpiringSet<UUID> targetingPlayers, targetingOther, notTargeting;
    
    public RateLimitWitherSkulls() {
        super("preventions.withers.rate-limit-shooting-skulls", false,
                "This can help combat lag caused by a ton of wither skulls\n" +
                "spawning but weakens withers.");
        this.playerCooldownMillis = Math.max(1, config.getInt(configPath + ".player-target-cooldown-in-ticks", 20,
                "Cooldown until another skull will be shot at a player")) * 50L;
        this.otherCooldownMillis = Math.max(1, config.getInt(configPath + ".other-target-cooldown-in-ticks", 40,
                "Cooldown until another skull can be shot at anything \n" +
                "else other than a player."))  * 50L;
        this.notargetCooldownMillis = Math.max(1, config.getInt(configPath + ".no-target-cooldown-in-ticks", 100,
                        "Cooldown when wither has no target")) * 50L;
    }

    @Override
    public void enable() {
        targetingPlayers = new ExpiringSet<>(Duration.ofMillis(playerCooldownMillis));
        targetingOther = new ExpiringSet<>(Duration.ofMillis(otherCooldownMillis));
        notTargeting = new ExpiringSet<>(Duration.ofMillis(notargetCooldownMillis));
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (targetingPlayers != null) {
            targetingPlayers.clear();
            targetingPlayers.cleanUp();
            targetingPlayers = null;
        }
        if (targetingOther != null) {
            targetingOther.clear();
            targetingOther.cleanUp();
            targetingOther = null;
        }
        if (notTargeting != null) {
            notTargeting.clear();
            notTargeting.cleanUp();
            notTargeting = null;
        }
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onProjectileLaunch(ProjectileLaunchEvent event) {
        if (event.getEntityType() != XEntityType.WITHER_SKULL.get()) return;
        if (!(event.getEntity().getShooter() instanceof Wither)) return;

        final Wither wither = (Wither) event.getEntity().getShooter();

        if (
                targetingPlayers.contains(wither.getUniqueId())
                || targetingOther.contains(wither.getUniqueId())
                || notTargeting.contains(wither.getUniqueId())
        ) {
            event.setCancelled(true);
            return;
        }

        if (wither.getTarget() == null) {
            notTargeting.add(wither.getUniqueId());
            return;
        }

        if (wither.getTarget().getType() == XEntityType.PLAYER.get()) {
            targetingPlayers.add(wither.getUniqueId());
            return;
        }

        targetingOther.add(wither.getUniqueId());
    }
}
