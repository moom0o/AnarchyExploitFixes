package me.xginko.aef.modules.patches;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

public class TeleportCoordExploit extends AEFModule implements Listener {

    private final long teleportVanishTime;
    private final int minDistanceToVanishPlayers;

    public TeleportCoordExploit() {
        super("patches.prevent-teleport-coordinate-exploit", true,
                "Patches coordinate exploit for teleportation commands such as /tpa,\n" +
                        "/home AS WELL as respawn exploits. \n" +
                        "This is done by vanishing the player for x ticks before teleporting.");
        this.minDistanceToVanishPlayers = config.getInt(configPath + ".min-distance-to-vanish-player", 100);
        this.teleportVanishTime = config.getInt(configPath + ".teleport-vanish-time-in-ticks", 10);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void vanish(Player player) {
        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (onlinePlayer.getUniqueId() != player.getUniqueId()) {
                onlinePlayer.hidePlayer(plugin, player);
            }
        }
    }

    private void unVanish(Player player) {
        for (Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (onlinePlayer.getUniqueId() != player.getUniqueId()) {
                onlinePlayer.showPlayer(plugin, player);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(PlayerTeleportEvent event) {
        switch (event.getCause()) {
            case PLUGIN:
            case COMMAND:
            case ENDER_PEARL:
            case UNKNOWN:
            case SPECTATE:
                if (LocationUtil.getRelDistance2D(event.getFrom(), event.getTo()) >= minDistanceToVanishPlayers) {
                    Player player = event.getPlayer();
                    vanish(player);
                    plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> unVanish(player), teleportVanishTime);
                }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(PlayerRespawnEvent event) {
        final Player player = event.getPlayer();
        if (LocationUtil.getRelDistance2D(player.getLocation(), event.getRespawnLocation()) >= minDistanceToVanishPlayers) {
            vanish(player);
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> unVanish(player), teleportVanishTime);
        }
    }
}