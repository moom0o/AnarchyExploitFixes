package me.xginko.aef.modules.lagpreventions;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;

import java.time.Duration;
import java.util.UUID;

public class InventoryOpenSpam extends AEFModule implements Listener {

    /**
     * This is pretty much an ugly bandage to the actual problem and will need more work.
     * For now this is just barely enough to make a meaningful difference on some servers but
     * this needs a better implementation
     */

    private final Cache<UUID, Integer> playerInvOpenCooldowns;
    private final int interactLimit;

    public InventoryOpenSpam() {
        super("lag-preventions.prevent-inventory-open-spam");
        config.addComment(configPath + ".enable",
                "Rate-limit interactions with inventory holders to prevent a lag exploit.");
        this.interactLimit = config.getInt(configPath + ".max-interacts-per-time", 2);
        this.playerInvOpenCooldowns = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(
                config.getInt(configPath + ".time-in-ticks", 20) * 50L
        )).build();
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteractEntity(PlayerInteractEntityEvent event) {
        if (!EntityUtil.isInventoryHolder(event.getRightClicked())) return;

        Player player = event.getPlayer();
        int interactCount = playerInvOpenCooldowns.get(player.getUniqueId(), k -> 0);
        interactCount++;
        playerInvOpenCooldowns.put(player.getUniqueId(), interactCount);

        if (interactCount > interactLimit) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        if (!MaterialUtil.INVENTORY_HOLDER_ITEMS.contains(event.getClickedBlock().getType())) return;
        Player player = event.getPlayer();
        if (player.isSneaking()) return; // Try not to interfere with building

        int interactCount = playerInvOpenCooldowns.get(player.getUniqueId(), k -> 0);
        interactCount++;
        playerInvOpenCooldowns.put(player.getUniqueId(), interactCount);

        if (interactCount > interactLimit) {
            event.setCancelled(true);
        }
    }
}