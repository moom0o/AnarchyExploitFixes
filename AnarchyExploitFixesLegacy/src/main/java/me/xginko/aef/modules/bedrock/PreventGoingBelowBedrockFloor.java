package me.xginko.aef.modules.bedrock;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.WorldUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class PreventGoingBelowBedrockFloor extends AEFModule implements Listener {

    private final Set<String> exemptedWorlds;
    private final Material fillMaterial;
    private final boolean filling_enabled, eject_enabled, stop_elytra_enabled, teleport_enabled;
    private final double damageWhenMovingBelowBedrock;

    public PreventGoingBelowBedrockFloor() {
        super("bedrock.prevent-going-below-bedrock-floor");
        config.addComment(configPath + ".enable",
                "Prevents players from going below the bedrock floor.");
        this.eject_enabled = config.getBoolean(configPath + ".eject-player", true,
                "Eject player from the vehicle");
        this.stop_elytra_enabled = config.getBoolean(configPath + ".stop-elytra", true,
                "Disables a player's elytra flight");
        this.teleport_enabled = config.getBoolean(configPath + ".teleport", true,
                "Teleport player on top of that bedrock");
        this.damageWhenMovingBelowBedrock = config.getDouble(configPath + ".damage-when-moving",8.0, "1.0 = Half a heart of damage every time you move. Set 0 to disable");
        this.filling_enabled = config.getBoolean(configPath + ".fill-bedrock-hole", true,
                "Whether the bedrock hole should be filled or not");
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                Arrays.asList("world_the_end", "skyblock_world")));
        String configuredFillMaterial = config.getString(configPath + ".filler-material", "BEDROCK");
        Material filler_material = Material.BEDROCK;
        try {
            filler_material = Material.valueOf(configuredFillMaterial);
        } catch (IllegalArgumentException e) {
            notRecognized(Material.class, configuredFillMaterial);
        }
        this.fillMaterial = filler_material;
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        final Player player = event.getPlayer();
        final World world = player.getWorld();
        if (exemptedWorlds.contains(world.getName())) return;
        final Location playerLoc = player.getLocation();
        if (playerLoc.getY() >= WorldUtil.getMinWorldHeight(world)) return;

        if (eject_enabled && player.isInsideVehicle())
            player.leaveVehicle();
        if (stop_elytra_enabled && player.isGliding())
            player.setGliding(false);

        // place bedrock at the min world height
        if (filling_enabled)
            world.getBlockAt(playerLoc.getBlockX(), WorldUtil.getMinWorldHeight(world), playerLoc.getBlockZ()).setType(fillMaterial);

        // teleport player on top of that bedrock
        if (teleport_enabled) {
            Location tploc = event.getFrom().clone().add(0, 2, 0);
            event.setTo(tploc);
            player.teleport(tploc);
        }

        // Deals damage when moving below bedrock.
        if (damageWhenMovingBelowBedrock > 0) {
            player.damage(damageWhenMovingBelowBedrock);
        }
    }
}
