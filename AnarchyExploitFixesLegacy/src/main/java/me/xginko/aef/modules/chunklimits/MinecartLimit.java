package me.xginko.aef.modules.chunklimits;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;
import org.bukkit.scheduler.BukkitTask;

public class MinecartLimit extends AEFModule implements Listener, Runnable {

    private final long checkPeriod;
    private final int maxMinecartsPerChunk;
    private final boolean logIsEnabled;

    private BukkitTask bukkitTask;

    public MinecartLimit() {
        super("chunk-limits.minecart-limit", false,
                "Limit the amount of minecarts to prevent lag caused by collisions.");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", false);
        this.maxMinecartsPerChunk = config.getInt(configPath + ".max-minecarts-per-chunk", 25);
        this.checkPeriod = Math.max(1, config.getInt(configPath + ".check-period-in-ticks", 400,
                "200 ticks = 10 seconds."));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        bukkitTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (bukkitTask != null) {
            bukkitTask.cancel();
            bukkitTask = null;
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        Vehicle vehicle = event.getVehicle();
        if (!EntityUtil.MINECARTS.contains(vehicle.getType())) return;

        int minecartCount = 0;

        for (Entity entity : vehicle.getChunk().getEntities()) {
            if (!EntityUtil.MINECARTS.contains(entity.getType())) continue;
            minecartCount++;
            if (minecartCount <= maxMinecartsPerChunk) continue;

            entity.remove();
            if (logIsEnabled) info("Removed minecart " + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                    " because reached limit of " + maxMinecartsPerChunk);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;
                if (!chunk.isLoaded()) continue;

                int minecartCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    if (!EntityUtil.MINECARTS.contains(entity.getType())) continue;

                    minecartCount++;
                    if (minecartCount <= maxMinecartsPerChunk) continue;

                    entity.remove();
                    if (logIsEnabled) info("Removed minecart " + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                            " because reached limit of " + maxMinecartsPerChunk);
                }
            }
        }
    }
}
