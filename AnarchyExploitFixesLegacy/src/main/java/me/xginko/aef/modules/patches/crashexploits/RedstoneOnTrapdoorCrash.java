package me.xginko.aef.modules.patches.crashexploits;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.block.BlockRedstoneEvent;

import java.time.Duration;
import java.util.concurrent.atomic.AtomicInteger;

public class RedstoneOnTrapdoorCrash extends AEFModule implements Listener {

    private final long cacheTimeMillis;
    private final int trapdoorActivationLimit;
    private final boolean logIsEnabled;

    private Cache<Location, AtomicInteger> trapdoorActivationCache;

    public RedstoneOnTrapdoorCrash() {
        super("patches.prevent-redstone-on-trapdoor-crash", true,
                "prevents a powerful crash exploit present in 1.13 - 1.19.3");
        this.logIsEnabled = config.getBoolean(configPath + ".log", true);
        this.trapdoorActivationLimit = config.getInt(configPath + ".max-trapdoor-activations-by-redstone-per-time", 10);
        this.cacheTimeMillis = Math.max(1, config.getInt(configPath + ".time-in-ticks", 30, "1 sec = 20 ticks")) * 50L;
    }

    @Override
    public void enable() {
        trapdoorActivationCache = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(cacheTimeMillis)).build();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (trapdoorActivationCache != null) {
            trapdoorActivationCache.invalidateAll();
            trapdoorActivationCache.cleanUp();
            trapdoorActivationCache = null;
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onRedstonePowerTrapdoor(BlockRedstoneEvent event) {
        if (!MaterialUtil.TRAPDOORS.contains(event.getBlock().getType())) return;

        final Location trapdoorLoc = event.getBlock().getLocation();

        if (trapdoorActivationCache.get(trapdoorLoc, k -> new AtomicInteger()).incrementAndGet() > trapdoorActivationLimit) {
            event.getBlock().setType(Material.AIR);
            if (logIsEnabled) info("Prevented potential trapdoor crash at " + LocationUtil.toString(trapdoorLoc));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (event.getBlock() == null || !MaterialUtil.REDSTONE.contains(event.getBlock().getType())) return;

        if (MaterialUtil.TRAPDOORS.contains(event.getBlock().getRelative(BlockFace.DOWN).getType())) {
            event.setCancelled(true);
            if (logIsEnabled) info("Prevented potential trapdoor crash at " + LocationUtil.toString(event.getBlock().getLocation()));
        }
    }
}