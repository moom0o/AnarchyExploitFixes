package me.xginko.aef.modules.lagpreventions.regionalactivity;

import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockFormEvent;
import org.bukkit.event.block.BlockSpreadEvent;

public class BlockFormOrGrow extends RegionalActivityModule {

    private final int limit;

    public BlockFormOrGrow() {
        super(
                "block-spread",
                false,
                true,
                1500.0,
                6000,
                10000,
                10.0,
                120.0,
                "Limits blocks spreading or forming based on world conditions within a\n" +
                "configurable radius and timeframe to help reduce lag by cancelling burst\n" +
                "activity hotspots.\n" +
                "\n" +
                "Examples:\n" +
                "\n" +
                "- Snow forming due to a snow storm.\n" +
                "- Ice forming in a snowy Biome like Taiga or Tundra.\n" +
                "- Obsidian / Cobblestone forming due to contact with water.\n" +
                "- Concrete forming due to mixing of concrete powder and water.\n" +
                "- Mushrooms spreading.\n" +
                "- Fire spreading."
        );
        this.limit = config.getInt(configPath + ".block-form-event-limit", 800,
                "Maximum number of times a block can form or spread within the configured\n" +
                        "timeframe before activity will be put on cooldown.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockForm(BlockFormEvent event) {
        if (shouldCancelActivity(event, event.getBlock().getLocation(), limit)) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockSpread(BlockSpreadEvent event) {
        if (shouldCancelActivity(event, event.getBlock().getLocation(), limit)) {
            event.setCancelled(true);
        }
    }
}
