package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketSendEvent;
import com.github.retrooper.packetevents.protocol.entity.type.EntityTypes;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.server.WrapperPlayServerSpawnEntity;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.entity.Entity;
import org.bukkit.entity.ItemFrame;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.world.ChunkLoadEvent;

public class MapCursorLag extends PacketModule implements Listener {

    public MapCursorLag() {
        super("patches.map-cursor-lag-patch", true, PacketListenerPriority.HIGHEST,
                "Patches the famous stacked map cursor lag that causes both \n" +
                "client and server crashes.");
    }

    @Override
    public void enable() {
        if (EntityUtil.MAP_SET_TRACKING_POS_AVAILABLE)
            plugin.getServer().getPluginManager().registerEvents(this, plugin);
        PacketEvents.getAPI().getEventManager().registerListener(asAbstract);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        PacketEvents.getAPI().getEventManager().unregisterListener(asAbstract);
    }

    @Override
    public void onPacketSend(PacketSendEvent event) {
        if (event.getPacketType() != PacketType.Play.Server.SPAWN_ENTITY) return;

        if (new WrapperPlayServerSpawnEntity(event).getEntityType() == EntityTypes.MARKER) {
            event.setCancelled(true);
        }
    }

    /*
        For 1.16 and up
    */
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;

        for (Entity entity : event.getChunk().getEntities()) {
            if (EntityUtil.ITEM_FRAMES.contains(entity.getType())) {
                EntityUtil.disableMapPositionCursor((ItemFrame) entity);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInteract(PlayerInteractEntityEvent event) {
        if (EntityUtil.ITEM_FRAMES.contains(event.getRightClicked().getType())) {
            EntityUtil.disableMapPositionCursor((ItemFrame) event.getRightClicked());
        }
    }
}
