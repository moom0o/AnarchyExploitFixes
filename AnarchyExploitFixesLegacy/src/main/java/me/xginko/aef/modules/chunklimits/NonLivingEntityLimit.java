package me.xginko.aef.modules.chunklimits;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.scheduler.BukkitTask;

public class NonLivingEntityLimit extends AEFModule implements Listener, Runnable {

    private final long checkPeriod;
    private final int maxNonLivingEntities;
    private final boolean logIsEnabled;
    private BukkitTask bukkitTask;

    private BukkitTask bukkitTask;

    public NonLivingEntityLimit() {
        super("chunk-limits.entity-limits.non-living-limit", false,
                "Limit the amount of non living entities in a chunk to prevent lag.\n" +
                        "Ignores dropped items.");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", true);
        this.maxNonLivingEntities = config.getInt(configPath + ".max-non-living-per-chunk", 100);
        this.checkPeriod = Math.max(1, config.getInt(configPath + ".check-period-in-ticks", 20,
                "20 ticks = 1 second"));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        bukkitTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (bukkitTask != null) {
            bukkitTask.cancel();
            bukkitTask = null;
        }
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (bukkitTask != null) bukkitTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        if (event.getEntityType() == XEntityType.ITEM.get() || EntityUtil.isLivingEntity(event.getEntity())) return;

        int nonLivingCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType().equals(EntityType.DROPPED_ITEM)) continue;
            if (EntityUtil.isLivingEntity(entity)) continue;

            nonLivingCount++;
            if (nonLivingCount <= maxNonLivingEntities) continue;

            event.setCancelled(true);
            entity.remove();
            if (logIsEnabled) info("Removed non-living entity " + entity.getType() + " at " +
                    LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxNonLivingEntities);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;
                if (!chunk.isLoaded()) continue;

                int nonLivingCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    if (entity.getType() == XEntityType.ITEM.get()) continue;
                    if (EntityUtil.isLivingEntity(entity)) continue;

                    nonLivingCount++;
                    if (nonLivingCount <= maxNonLivingEntities) continue;

                    entity.remove();
                    if (logIsEnabled) info("Removed non-living entity " + entity.getType() + " at " +
                            LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxNonLivingEntities);
                }
            }
        }
    }
}
