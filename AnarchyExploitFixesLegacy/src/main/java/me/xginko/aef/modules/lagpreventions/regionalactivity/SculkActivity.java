package me.xginko.aef.modules.lagpreventions.regionalactivity;

import com.cryptomorin.xseries.XMaterial;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.block.BlockRedstoneEvent;

import java.util.EnumSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class SculkActivity extends RegionalActivityModule {

    private final Set<Material> sculkBlocks;
    private final int limit;

    public SculkActivity() {
        super(
                "sculk-sensor",
                true,
                1500.0,
                18000,
                20000,
                10.0,
                120.0
        );
        this.config.addComment(configPath+".enable",
                "Limits sculk activity within a configurable radius and timeframe\n" +
                        "to help reduce lag by cancelling high activity hotspots.\n" +
                        "\n" +
                        "Examples:\n" +
                        "\n" +
                        "- A redstone current changes for a sculk sensor.\n" +
                        "- A physics check is being performed for a sculk sensor.");
        this.limit = config.getInt(configPath + ".sculk-event-limit", 800,
                "Maximum number of sculk events within configured timeframe.");
        List<String> defaults = Stream.of(
                XMaterial.SCULK_SENSOR,
                XMaterial.SCULK_SHRIEKER,
                XMaterial.CALIBRATED_SCULK_SENSOR)
                .filter(XMaterial::isSupported)
                .map(XMaterial::parseMaterial)
                .map(Enum::name)
                .collect(Collectors.toList());
        this.sculkBlocks = config.getList(configPath + ".sculk-blocks", defaults)
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockRedstone(BlockRedstoneEvent event) {
        if (!sculkBlocks.contains(event.getBlock().getType())) return;

        if (shouldCancelActivity(event, event.getBlock().getLocation(), limit)) {
            event.setNewCurrent(0);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPhysics(BlockPhysicsEvent event) {
        if (!sculkBlocks.contains(event.getBlock().getType())) return;

        if (shouldCancelActivity(event, event.getBlock().getLocation(), limit)) {
            event.setCancelled(true);
        }
    }
}
