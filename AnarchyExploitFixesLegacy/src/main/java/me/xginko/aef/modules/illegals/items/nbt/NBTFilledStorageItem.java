package me.xginko.aef.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.IllegalHandling;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class NBTFilledStorageItem extends IllegalItemModule {

    private final Set<Material> storageTypes;
    private final String stored_items_tag;
    private final boolean checkStored;

    public NBTFilledStorageItem() {
        super("illegals.nbt.impossibly-stored-items", AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS);
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission.string() + "\n" +
                "Prevents usage of or deletes storage items that have been pre-filled\n" +
                "with items using NBT tags. These can only be created by players with\n" +
                "creative access.\n" +
                "Most commonly dispensers, droppers and chests containing kit shulkers\n" +
                "are created but there are more combinations possible.");
        this.stored_items_tag = config.getString(configPath + ".tag", "BlockEntityTag",
                "The exact name of the nbt tag that signals items are stored inside.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        this.storageTypes = config.getList(configPath + ".storage-types", MaterialUtil.INVENTORY_HOLDER_ITEMS.stream()
                        .filter(material -> !MaterialUtil.SHULKER_BOXES.contains(material)).map(Enum::name).sorted().collect(Collectors.toList()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (storageTypes.contains(itemStack.getType()) && new NBTItem(itemStack).getKeys().contains(stored_items_tag)) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
