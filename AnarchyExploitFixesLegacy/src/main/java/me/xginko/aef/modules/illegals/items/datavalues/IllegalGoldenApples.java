package me.xginko.aef.modules.illegals.items.datavalues;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.utils.permissions.AEFPermission;
import me.xginko.aef.utils.enums.IllegalHandling;
import me.xginko.aef.utils.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.PlatformUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.EnumMap;
import java.util.Map;

public class IllegalGoldenApples extends IllegalItemModule {

    private final Map<Material, MaterialData> allowedAppleData = new EnumMap<>(Material.class);
    private final boolean checkStored;

    public IllegalGoldenApples() {
        super("illegals.data-values.illegal-golden-apples", false, AEFPermission.BYPASS_ILLEGAL_DATA_APPLE,
                "1.12 Only. Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_DATA_APPLE.node() + "\n" +
                        "Deletes apples with illegal MaterialData values. Will use the\n" +
                        "API to determine what a natural value looks like.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        if (XMaterial.GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.GOLDEN_APPLE.get(),
                    new MaterialData(XMaterial.GOLDEN_APPLE.get()));
        }
        if (XMaterial.ENCHANTED_GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.ENCHANTED_GOLDEN_APPLE.get(),
                    new MaterialData(XMaterial.ENCHANTED_GOLDEN_APPLE.get()));
        }
    }

    @Override
    public boolean shouldEnable() {
        return configEnabled && PlatformUtil.getMinecraftVersion() <= 12;
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        if (allowedAppleData.containsKey(itemStack.getType()) && !allowedAppleData.containsValue(itemStack.getData())) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (illegalHandling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        switch (legality) {
            case ILLEGAL:
                itemStack.setData(allowedAppleData.get(itemStack.getType()));
                break;
            case CONTAINS_ILLEGAL:
                itemStack.setAmount(0);
        }
    }
}
