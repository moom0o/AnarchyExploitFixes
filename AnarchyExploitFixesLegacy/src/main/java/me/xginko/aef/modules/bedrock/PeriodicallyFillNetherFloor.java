package me.xginko.aef.modules.bedrock;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.WorldUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.scheduler.BukkitTask;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class PeriodicallyFillNetherFloor extends AEFModule implements Runnable {

    private final Set<String> exemptedWorlds;
    private final long checkPeriod;
    private final double pauseTPS;
    private final boolean checkShouldPauseOnLowTPS;

    private BukkitTask bukkitTask;

    public PeriodicallyFillNetherFloor() {
        super("bedrock.fill-in-bedrock.nether-floor.periodically-check-and-fill", false);
        config.addComment(configPath + ".enable","Only checks loaded chunks.");
        this.checkPeriod = config.getInt(configPath + ".check-period-in-seconds", 10) * 20L;
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                Arrays.asList("exampleworld", "exampleworld2"),
                "Uses the exact name of the world's folder in your server directory."));
        this.checkShouldPauseOnLowTPS = config.getBoolean(configPath + ".pause-on-low-tps", true);
        this.pauseTPS = config.getDouble(configPath + ".pause-tps", 16.0,
                "The TPS at which bedrock filling will pause to avoid adding to the lag.");
    }

    @Override
    public void enable() {
        bukkitTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, 20L, checkPeriod);
    }

    @Override
    public void disable() {
        if (bukkitTask != null) {
            bukkitTask.cancel();
            bukkitTask = null;
        }
    }

    @Override
    public void run() {
        if (checkShouldPauseOnLowTPS && AnarchyExploitFixes.tickReporter().getTPS() <= pauseTPS) return;

        for (World world : plugin.getServer().getWorlds()) {
            if (world.getEnvironment() == World.Environment.NETHER) {
                if (!exemptedWorlds.contains(world.getName())) {
                    for (Chunk chunk : world.getLoadedChunks()) {
                        if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                        ChunkUtil.createBedrockLayer(chunk, WorldUtil.getMinWorldHeight(world));
                    }
                }
            }
        }
    }
}
