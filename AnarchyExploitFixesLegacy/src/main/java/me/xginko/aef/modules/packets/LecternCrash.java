package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.inventory.InventoryType;

public class LecternCrash extends PacketModule {

    private InventoryType LECTERN;
    private final boolean log, kick;

    public LecternCrash() {
        super("patches.lectern-crash-patch", false, PacketListenerPriority.HIGHEST,
                "Patches an instant server crash exploit that involves sending\n" +
                "an invalid Window Click packet while taking a book out of a Lectern.");
        try { this.LECTERN = InventoryType.valueOf("LECTERN"); } catch (IllegalArgumentException ignored) {}
        this.log = config.getBoolean(configPath + ".log", false);
        this.kick = config.getBoolean(configPath + ".kick-player", false);
    }

    @Override
    public boolean shouldEnable() {
        return configEnabled && LECTERN != null;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.isCancelled() || event.getPlayer() == null) return;
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        if (new WrapperPlayClientClickWindow(event).getWindowClickType() != WrapperPlayClientClickWindow.WindowClickType.QUICK_MOVE) return;

        if (((HumanEntity) event.getPlayer()).getOpenInventory().getType() == LECTERN) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }
    }
}
