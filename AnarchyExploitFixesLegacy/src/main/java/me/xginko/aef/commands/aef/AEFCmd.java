package me.xginko.aef.commands.aef;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import me.xginko.aef.commands.AEFCommand;
import me.xginko.aef.commands.SubCommand;
import me.xginko.aef.commands.aef.subcommands.DisableSubCmd;
import me.xginko.aef.commands.aef.subcommands.ElytraSubCmd;
import me.xginko.aef.commands.aef.subcommands.GearedSubCmd;
import me.xginko.aef.commands.aef.subcommands.LagSubCmd;
import me.xginko.aef.commands.aef.subcommands.ReloadSubCmd;
import me.xginko.aef.commands.aef.subcommands.VersionSubCmd;
import org.bukkit.command.CommandException;
import org.bukkit.command.CommandSender;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class AEFCmd extends AEFCommand {

    private final Set<SubCommand> subCommands;
    private final List<String> tabCompletes, overview;

    public AEFCmd() {
        super(
                "aef",
                "AnarchyExploitFixes admin commands",
                "/aef <reload, version, bytesize, disable, elytra, geared, lag>",
                Collections.emptyList()
        );
        this.overview = Stream.of(
                "",
                "                 §b§lAnarchyExploitFixes Commands",
                "",
                "  §b/aef version §8- §fShow the plugin version.",
                "  §b/aef reload §8- §fReload the plugin.",
                "  §b/aef disable §8- §fDisable the plugin.",
                "  §b/aef lag <millis> §8- §fLag the server for testing.",
                "  §b/aef geared §8- §fCount how many players are wearing gear.",
                "  §b/aef elytra §8- §fCount how many players are flying elytra.",
                "  §b/aef datavalue §8- §fShow the MaterialData value of an item.",
                "  §b/aef bytesize <mainhand/inventory> (player) (utf8/utf16)",
                "                §8- §fGet the byte size of an item or inventory.",
                ""
                ).collect(Collectors.collectingAndThen(Collectors.toList(), ImmutableList::copyOf));
        this.subCommands = ImmutableSet.of(
                new ReloadSubCmd(),
                new VersionSubCmd(),
                new DisableSubCmd(),
                new LagSubCmd(),
                new ElytraSubCmd(),
                new GearedSubCmd());
        this.tabCompletes = subCommands.stream().map(SubCommand::label).sorted()
                .collect(Collectors.collectingAndThen(Collectors.toList(), ImmutableList::copyOf));
    }

    @Override
    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args)
            throws CommandException, IllegalArgumentException
    {
        if (args.length == 1) {
            return tabCompletes.stream()
                    .filter(cmd -> cmd.toLowerCase(Locale.ROOT).startsWith(args[0].toLowerCase(Locale.ROOT)))
                    .collect(Collectors.toList());
        }

        if (args.length > 1) {
            for (SubCommand subCommand : subCommands) {
                if (args[0].equalsIgnoreCase(subCommand.label())) {
                    return subCommand.tabComplete(sender, alias, args);
                }
            }
        }

        return Collections.emptyList();
    }

    @Override
    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
        if (args.length > 0) {
            for (SubCommand subCommand : subCommands) {
                if (args[0].equalsIgnoreCase(subCommand.label())) {
                    return subCommand.execute(sender, commandLabel, args);
                }
            }
        }

        overview.forEach(sender::sendMessage);
        return true;
    }
}
