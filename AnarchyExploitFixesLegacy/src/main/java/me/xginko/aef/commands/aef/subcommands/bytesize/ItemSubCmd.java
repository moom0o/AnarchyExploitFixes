package me.xginko.aef.commands.aef.subcommands.bytesize;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.commands.SubCommand;
import me.xginko.aef.utils.permissions.AEFPermission;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.CommandException;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;

import java.time.Duration;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class ItemSubCmd extends SubCommand {

    private final List<String> utfList;
    private final Cache<Boolean, List<String>> tabCompleteCache;

    public ItemSubCmd() {
        this.utfList = Arrays.asList("UTF16", "UTF8");
        this.tabCompleteCache = Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(10)).build();
    }

    @Override
    public @NotNull String label() {
        return "mainhand";
    }

    @Override
    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args)
            throws CommandException, IllegalArgumentException
    {
        if (!AnarchyExploitFixes.permissions().permissionValue(sender, AEFPermission.CMD_AEF_SIZE_HAND.node()).toBoolean()) {
            return Collections.emptyList();
        }

        if (args.length == 3) {
            List<String> playerList = this.tabCompleteCache.get(true,
                    k -> Bukkit.getOnlinePlayers().stream().map(Player::getName).collect(Collectors.toList()));
            if (sender instanceof Player) {
                return "utf8".startsWith(args[2].toLowerCase()) || "utf16".startsWith(args[2].toLowerCase()) ? utfList : playerList;
            } else {
                return playerList;
            }
        }

        if (args.length == 4 && !"utf8".startsWith(args[2].toLowerCase()) && !"utf16".startsWith(args[2].toLowerCase())) {
            return utfList;
        }

        return Collections.emptyList();
    }

    @Override
    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
        if (!AnarchyExploitFixes.permissions().permissionValue(sender, AEFPermission.CMD_AEF_SIZE_HAND.node()).toBoolean()) {
            sender.sendMessage(AnarchyExploitFixes.translation(sender).no_permission);
            return true;
        }

        int byteSize;

        if (args.length == 2) {
            if (!(sender instanceof Player)) {
                sender.sendMessage(ChatColor.RED + "Please specify a player.");
                return true;
            }
            byteSize = ItemUtil.getApproximateByteSize(((Player) sender).getInventory().getItemInMainHand(), false);
        }

        else if (args.length == 3) {
            if (args[2].equalsIgnoreCase("UTF16")) {
                byteSize = ItemUtil.getApproximateByteSize(((Player) sender).getInventory().getItemInMainHand(), true);
            } else if (args[2].equalsIgnoreCase("UTF8")) {
                byteSize = ItemUtil.getApproximateByteSize(((Player) sender).getInventory().getItemInMainHand(), false);
            } else {
                Player target = Bukkit.getPlayer(args[2]);
                if (target == null) {
                    sender.sendMessage(ChatColor.RED + "Player not found.");
                } else {
                    byteSize = ItemUtil.getApproximateByteSize(target.getInventory().getItemInMainHand(), false);
                    sender.sendMessage(ChatColor.AQUA + target.getName()+"'s" + ChatColor.WHITE + " Mainhand bytesize: " + ChatColor.AQUA + byteSize);
                }
                return true;
            }
        }

        else {
            Player target = Bukkit.getPlayer(args[2]);
            if (target == null) {
                sender.sendMessage(ChatColor.RED + "Player not found.");
                return true;
            }

            if (args[3].equalsIgnoreCase("UTF16")) {
                byteSize = ItemUtil.getApproximateByteSize(target.getInventory().getItemInMainHand(), true);
            } else if (args[3].equalsIgnoreCase("UTF8")) {
                byteSize = ItemUtil.getApproximateByteSize(target.getInventory().getItemInMainHand(), false);
            } else {
                sender.sendMessage(ChatColor.RED + "Enter utf8 or utf16");
                return true;
            }

            sender.sendMessage(ChatColor.AQUA + target.getName()+"'s" + ChatColor.WHITE + " Mainhand bytesize: " + ChatColor.AQUA + byteSize);
            return true;
        }

        sender.sendMessage(ChatColor.WHITE + "Mainhand bytesize: " + ChatColor.AQUA + byteSize);
        return true;
    }
}