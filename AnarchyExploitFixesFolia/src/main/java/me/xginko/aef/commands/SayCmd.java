package me.xginko.aef.commands;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.utils.permissions.AEFPermission;
import me.xginko.aef.utils.CommandUtil;
import net.kyori.adventure.text.TextReplacementConfig;
import net.kyori.adventure.text.minimessage.MiniMessage;
import org.bukkit.command.Command;
import org.bukkit.command.CommandException;
import org.bukkit.command.CommandSender;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.List;

public class SayCmd extends Command implements AEFCommand {

    public SayCmd() {
        super("say", "Custom say command", "/say", Collections.emptyList());
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().cmd_say_enabled;
    }

    @Override
    @SuppressWarnings("UnstableApiUsage")
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getCommandMap().register(plugin.getPluginMeta().getName().toLowerCase(), this);
    }

    @Override
    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args)
            throws CommandException, IllegalArgumentException
    {
        return Collections.emptyList();
    }

    @Override
    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
        if (!AnarchyExploitFixes.permissions().permissionValue(sender, AEFPermission.CMD_SAY.node()).toBoolean()) {
            sender.sendMessage(AnarchyExploitFixes.getLang(sender).no_permission);
            return true;
        }

        AnarchyExploitFixes.getInstance().getServer().broadcast(AnarchyExploitFixes.config().cmd_say_format
                .replaceText(TextReplacementConfig.builder()
                        .matchLiteral("%message%")
                        .replacement(MiniMessage.miniMessage().deserialize(CommandUtil.mergeArgs(args, 0)))
                        .build()));

        return true;
    }
}
