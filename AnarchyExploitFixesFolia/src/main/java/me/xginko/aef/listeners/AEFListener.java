package me.xginko.aef.listeners;

import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.utils.models.ConditionalEnableable;
import me.xginko.aef.utils.models.Disableable;
import org.reflections.Reflections;
import org.reflections.scanners.Scanners;

import java.lang.reflect.Modifier;
import java.util.HashSet;
import java.util.Set;

public interface AEFListener extends ConditionalEnableable, Disableable {

    Reflections LISTENERS_PACKAGE = new Reflections(AEFListener.class.getPackage().getName());

    Set<AEFListener> LISTENERS = new HashSet<>();

    static void reloadListeners() {
        LISTENERS.forEach(AEFListener::disable);
        LISTENERS.clear();

        for (Class<?> clazz : LISTENERS_PACKAGE.get(Scanners.SubTypes.of(AEFListener.class).asClass())) {
            if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) continue;

            try {
                AEFListener listener = (AEFListener) clazz.getDeclaredConstructor().newInstance();
                if (listener.shouldEnable()) {
                    if (listener instanceof PacketListenerAbstract && AnarchyExploitFixes.config().packets_disabled) {
                        AnarchyExploitFixes.getPrefixedLogger()
                                .warn("Cannot enable listener {} because you disabled packets in config!", clazz.getSimpleName());
                        continue;
                    }

                    listener.enable();
                    LISTENERS.add(listener);
                }
            } catch (Throwable t) {
                AnarchyExploitFixes.getPrefixedLogger().error("Failed to load listener {}", clazz.getSimpleName(), t);
            }
        }
    }

}
