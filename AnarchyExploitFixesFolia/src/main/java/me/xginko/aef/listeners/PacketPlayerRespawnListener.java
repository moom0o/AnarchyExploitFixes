package me.xginko.aef.listeners;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClientStatus;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.events.PacketPlayerRespawnEvent;
import me.xginko.aef.utils.PlatformUtil;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;

import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CopyOnWriteArraySet;

public class PacketPlayerRespawnListener extends PacketListenerAbstract implements AEFListener, Listener {

    private static final Set<UUID> DEAD_PLAYERS = new CopyOnWriteArraySet<>();
    private final AnarchyExploitFixes plugin;

    public PacketPlayerRespawnListener() {
        super(PacketListenerPriority.HIGHEST);
        this.plugin = AnarchyExploitFixes.getInstance();
    }

    @Override
    public boolean shouldEnable() {
        return PlatformUtil.isFolia();
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerDeath(PlayerDeathEvent event) {
        DEAD_PLAYERS.add(event.getPlayer().getUniqueId());
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.isCancelled()) return;
        if (event.getPacketType() != PacketType.Play.Client.CLIENT_STATUS) return;
        WrapperPlayClientClientStatus packet = new WrapperPlayClientClientStatus(event);
        if (packet.getAction() != WrapperPlayClientClientStatus.Action.PERFORM_RESPAWN) return;

        UUID uuid = event.getUser().getUUID();
        Player bukkitPlayer = plugin.getServer().getPlayer(uuid);
        if (bukkitPlayer == null) return;

        if (DEAD_PLAYERS.contains(uuid) || bukkitPlayer.isDead()) {
            bukkitPlayer.getScheduler().execute(plugin, () -> {
                new PacketPlayerRespawnEvent(bukkitPlayer).callEvent();
                DEAD_PLAYERS.remove(bukkitPlayer.getUniqueId());
            }, null, 20L);
        }
    }
}
