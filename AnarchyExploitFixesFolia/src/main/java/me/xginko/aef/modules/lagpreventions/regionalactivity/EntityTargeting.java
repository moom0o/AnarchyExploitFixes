package me.xginko.aef.modules.lagpreventions.regionalactivity;

import com.cryptomorin.xseries.XEntityType;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityTargetEvent;
import org.bukkit.util.NumberConversions;

import java.util.EnumMap;
import java.util.Map;
import java.util.TreeMap;

public class EntityTargeting extends RegionalActivityModule implements Listener {

    private final Map<EntityType, Double> limitedTypes = new EnumMap<>(EntityType.class);
    private final double globalMaxDistanceSquared;
    private final int limit;
    private final boolean globalDistanceEnabled, perTypeDistanceEnabled;

    public EntityTargeting() {
        super("entity-targeting",
                false,
                true,
                1500.0,
                18000,
                20000,
                14.0,
                120.0,
                """
                Limits entities targeting other entities within a configurable radius\s
                and timeframe to help reduce lag by cancelling burst activity hotspots."""
        );
        this.limit = config.getInt(configPath + ".entity-target-event-limit", 8000, """
                Maximum number of times an entity can target another entity within the\s
                configured timeframe before the area will be put on cooldown.""");

        this.globalDistanceEnabled = config.getBoolean(configPath + ".distance-limit.global-limit.enable", false);
        this.globalMaxDistanceSquared = NumberConversions.square(
                config.getDouble(configPath + ".distance-limit.global-limit.max-target-distance", 20.0, """
                        The max distance no target should exceed.\s
                        You want this to be higher than your highest max distance\s
                        for a specific mob."""));

        this.perTypeDistanceEnabled = config.getBoolean(configPath + ".distance-limit.custom-limits.enable", true);
        Map<XEntityType, Double> defaults = new EnumMap<>(XEntityType.class);
        defaults.put(XEntityType.ZOMBIE, 6.0);
        defaults.put(XEntityType.SKELETON, 6.0);
        defaults.put(XEntityType.WITHER_SKELETON, 8.0);
        defaults.put(XEntityType.ZOMBIE_VILLAGER, 10.0);
        defaults.put(XEntityType.ZOMBIFIED_PIGLIN, 8.0);
        defaults.put(XEntityType.WITHER, 8.0);
        Map<String, Object> versionDefaults = new TreeMap<>();
        for (Map.Entry<XEntityType, Double> entry : defaults.entrySet()) {
            if (entry.getKey().isSupported()) {
                versionDefaults.put(entry.getKey().get().name(), entry.getValue());
            }
        }
        ConfigSection section = config.getConfigSection(configPath + ".distance-limit.custom-limits.entities", versionDefaults);
        for (String configuredEntity : section.getKeys(false)) {
            try {
                Double maxDistanceSquared = NumberConversions.square(Double.parseDouble(section.getString(configuredEntity)));
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                this.limitedTypes.put(limitedEntity, maxDistanceSquared);
            } catch (NumberFormatException e) {
                notRecognized(Double.class, configuredEntity);
            } catch (IllegalArgumentException e) {
                notRecognized(EntityType.class, configuredEntity);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityTarget(EntityTargetEvent event) {
        Entity targetEntity = event.getTarget();
        if (targetEntity == null) return; // If entity un-targets an entity, it's good for us.

        Location location = event.getEntity().getLocation();
        if (shouldCancelActivity(event, location, limit)) {
            event.setCancelled(true);
            return;
        }

        if (!globalDistanceEnabled && !perTypeDistanceEnabled) {
            return;
        }

        double targetDistanceSquared;
        try {
            targetDistanceSquared = event.getEntity().getLocation().distanceSquared(targetEntity.getLocation());
        } catch (IllegalArgumentException e) {
            if (logIsEnabled) error("Unable to measure distance between entity and target.", e);
            return;
        }

        if (globalDistanceEnabled) {
            if (targetDistanceSquared > globalMaxDistanceSquared) {
                event.setCancelled(true);
                event.setTarget(null);
                if (logIsEnabled) info("Cancelled target acquire for entity " + event.getEntityType().name() + " at " +
                        LocationUtil.toString(location) +
                        " because target is further than the global limit. Distance: " + Math.sqrt(targetDistanceSquared));
                return;
            }
        }

        if (perTypeDistanceEnabled) {
            if (limitedTypes.containsKey(event.getEntityType()) && targetDistanceSquared > limitedTypes.get(event.getEntityType())) {
                event.setCancelled(true);
                event.setTarget(null);
                if (logIsEnabled) info("Cancelled target acquire for entity " + event.getEntityType().name() + " at " +
                        LocationUtil.toString(location) +
                        " because target further than its configured limit. Distance: " + Math.sqrt(targetDistanceSquared));
            }
        }
    }
}
