package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListener;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.protocol.player.User;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;

import java.time.Duration;
import java.util.UUID;

public abstract class PacketModule extends AEFModule implements PacketListener {

    protected final PacketListenerAbstract asAbstract;
    protected final ExpiringSet<UUID> loggingCooldown;

    public PacketModule(String configPath, boolean enabledByDefault, PacketListenerPriority priority) {
        this(configPath, enabledByDefault, priority, null);
    }

    public PacketModule(String configPath, boolean enabledByDefault, PacketListenerPriority priority, String comment) {
        super(configPath, enabledByDefault, comment);
        this.asAbstract = asAbstract(priority);
        // Otherwise will log for each received packet, which would be a LOT
        this.loggingCooldown = new ExpiringSet<>(Duration.ofMinutes(5));
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(asAbstract);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(asAbstract);
    }

    public void onCancel(boolean log, boolean kick, User sender) {
        if (log && !loggingCooldown.contains(sender.getUUID())) {
            info(sender.getName() + " failed to trigger exploit.");
            loggingCooldown.add(sender.getUUID());
        }

        if (kick) {
            sender.closeConnection();
        }
    }
}
