package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XEntityType;
import com.cryptomorin.xseries.XMaterial;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.time.Duration;
import java.util.UUID;

public class PortalGodMode extends AEFModule implements Listener {

    private final long delayTicks;

    private Cache<UUID, ScheduledTask> playersWaitingForPortalTeleport;

    public PortalGodMode() {
        super("combat.portal-god-mode-patch", false, """
                Prevents an exploit that allows players to stand in nether portals and not\s
                take damage indefinitely by just never sending a TeleportConfirm packet to\s
                the server.\s
                A similar method is used for the chorus tp exploit, which is not covered\s
                by this module.""");
        this.delayTicks = config.getInt(configPath + ".break-portal-delay-ticks", 100, """
                If the player stays inside the nether portal for this time without teleporting,\s
                the portal will be broken, making the player inside vulnerable again.\s
                Nether portal teleports normally happen within ~3s after enter, so 5s (100ticks)\s
                should be a safe value.""");
    }

    @Override
    public void enable() {
        playersWaitingForPortalTeleport = Caffeine.newBuilder()
                .expireAfterWrite(Duration.ofMillis((delayTicks * 50L) + 1000L)).build(); // Keep cached content for a second longer just in case
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (playersWaitingForPortalTeleport != null) {
            playersWaitingForPortalTeleport.asMap().clear();
            playersWaitingForPortalTeleport.cleanUp();
            playersWaitingForPortalTeleport = null;
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onEntityPortalEnter(EntityPortalEnterEvent event) {
        if (event.getEntityType() != XEntityType.PLAYER.get()) return;

        if (playersWaitingForPortalTeleport.getIfPresent(event.getEntity().getUniqueId()) != null) return;

        playersWaitingForPortalTeleport.put(event.getEntity().getUniqueId(),
                plugin.getServer().getRegionScheduler().runDelayed(plugin, event.getLocation(), breakPortal -> {
                    event.getLocation().getBlock().setType(XMaterial.AIR.get(), true);
                    playersWaitingForPortalTeleport.invalidate(event.getEntity().getUniqueId());
                }, delayTicks));
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerTeleport(PlayerTeleportEvent event) {
        if (event.getCause() != PlayerTeleportEvent.TeleportCause.NETHER_PORTAL) return;

        @Nullable ScheduledTask breakPortalTask = playersWaitingForPortalTeleport.getIfPresent(event.getPlayer().getUniqueId());

        if (breakPortalTask != null) {
            breakPortalTask.cancel();
            playersWaitingForPortalTeleport.invalidate(event.getPlayer().getUniqueId());
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        @Nullable ScheduledTask breakPortalTask = playersWaitingForPortalTeleport.getIfPresent(event.getPlayer().getUniqueId());
        if (breakPortalTask == null) return;

        if (event.getTo().getBlock().getType() != XMaterial.NETHER_PORTAL.get()) {
            breakPortalTask.cancel();
            playersWaitingForPortalTeleport.invalidate(event.getPlayer().getUniqueId());
        }
    }
}
