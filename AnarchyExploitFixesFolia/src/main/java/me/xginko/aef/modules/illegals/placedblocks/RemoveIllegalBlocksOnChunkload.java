package me.xginko.aef.modules.illegals.placedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class RemoveIllegalBlocksOnChunkload extends AEFModule implements Listener {

    private final Set<Material> blocksToRemove;
    private final Set<String> exemptedWorlds;
    private final boolean checkShouldPauseOnLowTPS;
    private final double pauseTPS;

    public RemoveIllegalBlocksOnChunkload() {
        super("illegals.remove-placed-blocks.on-chunkload");
        config.addComment(configPath + ".enable",
                "Remove illegally placed blocks on chunkload.");
        this.blocksToRemove = config.getList(configPath + ".blocks-to-remove",
                List.of("PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART",
                        "REPEATING_COMMAND_BLOCK", "BEDROCK", "BARRIER"),
                        "Enter PLAYER_HEAD here if you want to remove placed playerheads.")
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                List.of("exampleworld1", "exampleworld2")));
        this.checkShouldPauseOnLowTPS = config.getBoolean(configPath + ".pause-on-low-TPS", false);
        this.pauseTPS = config.getDouble(configPath + ".pause-TPS", 14.0);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;
        if (ChunkUtil.isRetrievalUnsafe(event.getChunk())) return;
        if (exemptedWorlds.contains(event.getWorld().getName())) return;
        if (checkShouldPauseOnLowTPS && AnarchyExploitFixes.tickReporter().getTPS() <= pauseTPS) return;

        final int minY = event.getWorld().getMinHeight();
        final int maxY = event.getWorld().getMaxHeight();
        final boolean inNether = event.getWorld().getEnvironment() == World.Environment.NETHER;

        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                for (int y = minY; y < maxY; y++) {
                    Block block = event.getChunk().getBlock(x, y, z);
                    if (!blocksToRemove.contains(block.getType())) continue;

                    // If is bedrock, make sure not to delete naturally generated
                    if (block.getType() == XMaterial.BEDROCK.parseMaterial()) {
                        if (y > minY + 4) { // offset to not delete natural bedrock floor
                            if (inNether) {
                                // offset to not delete bedrock ceiling
                                if (y < config.nether_ceiling_max_y - 5) 
                                    block.setType(XMaterial.AIR.parseMaterial(), false);
                            } else {
                                block.setType(XMaterial.AIR.parseMaterial(), false);
                            }
                        }
                        continue;
                    }

                    block.setType(XMaterial.AIR.parseMaterial(), false);
                }
            }
        }
    }
}
