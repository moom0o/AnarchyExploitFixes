package me.xginko.aef.modules.preventions.withers;

import com.cryptomorin.xseries.XEntityType;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.util.NumberConversions;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WitherSkullDropsAtSpawn extends AEFModule implements Listener {

    private final Map<String, Double> worldsAndTheirRadiuses;

    public WitherSkullDropsAtSpawn() {
        super("preventions.withers.disable-item-drops-at-spawn", false,
                "Prevents wither skulls from dropping items when they hit a block\n" +
                "within a certain radius from 00. Can help with lag.");
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("world", 5000);
        defaults.put("world_nether", 5000);
        defaults.put("world_the_end", 5000);
        ConfigSection section = config.getConfigSection(configPath + ".worlds", defaults);
        List<String> worlds = section.getKeys(false);
        this.worldsAndTheirRadiuses = new HashMap<>(worlds.size());
        for (String world : worlds) {
            try {
                double radiusSquared = NumberConversions.square(Integer.parseInt(section.getString(world)));
                this.worldsAndTheirRadiuses.put(world, radiusSquared);
            } catch (NumberFormatException e) {
                warn("Radius for world '" + world + "' is not a valid integer.");
            }
        }
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityExplode(EntityExplodeEvent event) {
        if (event.getEntityType() != XEntityType.WITHER_SKULL.get()) return;
        if (!worldsAndTheirRadiuses.containsKey(event.getLocation().getWorld().getName())) return;

        if (LocationUtil.getSquaredDistance2DTo00(event.getLocation())
                <= worldsAndTheirRadiuses.get(event.getLocation().getWorld().getName())) {
            event.setYield(0);
        }
    }
}
