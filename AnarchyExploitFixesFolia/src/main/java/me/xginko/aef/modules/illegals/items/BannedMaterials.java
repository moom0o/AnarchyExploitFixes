package me.xginko.aef.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.utils.permissions.AEFPermission;
import me.xginko.aef.utils.enums.IllegalHandling;
import me.xginko.aef.utils.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class BannedMaterials extends IllegalItemModule {

    private final Set<Material> bannedMaterials;
    private final boolean checkStored;

    public BannedMaterials() {
        super("illegals.ban-specific-materials", false, AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL.node() + "\n" +
                        "Prevents usage of or deletes items with material that you do not want\n" +
                        "your players to be able to use.\n" +
                        "Useful if your players have blocks that shouldn't be obtainable in survival.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        List<String> defaults = Stream.of(
                        XMaterial.CHAIN_COMMAND_BLOCK,
                        XMaterial.COMMAND_BLOCK,
                        XMaterial.COMMAND_BLOCK_MINECART,
                        XMaterial.REPEATING_COMMAND_BLOCK,
                        XMaterial.BEDROCK,
                        XMaterial.BARRIER,
                        XMaterial.STRUCTURE_BLOCK,
                        XMaterial.STRUCTURE_VOID,
                        XMaterial.END_PORTAL_FRAME,
                        XMaterial.END_PORTAL,
                        XMaterial.NETHER_PORTAL,
                        XMaterial.LIGHT)
                .filter(XMaterial::isSupported)
                .map(XMaterial::get)
                .map(Enum::name)
                .collect(Collectors.toList());
        this.bannedMaterials = config.getList(configPath + ".banned-materials", defaults)
                .stream()
                .map(confMaterial -> {
                    try {
                        return Material.valueOf(confMaterial);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, confMaterial);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        if (bannedMaterials.contains(itemStack.getType())) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return;

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
