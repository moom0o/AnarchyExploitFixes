package me.xginko.aef.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.inventory.ItemStack;

public class CommandItems extends IllegalItemModule {

    private final boolean checkStored;

    public CommandItems() {
        super("illegals.nbt.command-items", AEFPermission.BYPASS_ILLEGAL_NBT_COMMAND_ITEM);
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission.string() + "\n" +
                        "Deletes items with commands in their NBT data that run as operator.\n" +
                        "These can only be created by players with creative access.\n" +
                        "Most common items are books, since it allows storing multiple commands.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!checkStored && MaterialUtil.INVENTORY_HOLDER_ITEMS.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (new NBTItem(itemStack).toString().contains("run_command")) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        // Command items are too dangerous to risk preserving them, which is why we will always take action.
        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
