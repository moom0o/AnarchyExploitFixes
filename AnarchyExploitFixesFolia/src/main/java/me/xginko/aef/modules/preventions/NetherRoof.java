package me.xginko.aef.modules.preventions;

import com.cryptomorin.xseries.XEntityType;
import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.permissions.AEFPermission;
import org.bukkit.Location;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.event.vehicle.VehicleMoveEvent;

public class NetherRoof extends AEFModule implements Listener {

    private static final BlockFace[] CARDINAL_FACES = { BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST };
    private final boolean safe_teleport_enabled;

    public NetherRoof() {
        super("preventions.prevent-nether-roof", true, 
                "Prevent players from going above the nether roof.");
        this.safe_teleport_enabled = config.getBoolean(configPath + ".safely-teleport-players", true);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(PlayerTeleportEvent event) {
        if (
                LocationUtil.isNetherCeiling(event.getTo())
                && !AnarchyExploitFixes.permissions().permissionValue(event.getPlayer(), AEFPermission.BYPASS_NETHER_ROOF.node()).toBoolean()
        ) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        if (
                LocationUtil.isNetherCeiling(event.getPlayer().getLocation())
                && !AnarchyExploitFixes.permissions().permissionValue(event.getPlayer(), AEFPermission.BYPASS_NETHER_ROOF.node()).toBoolean()
        ) {
            Location belowCeiling = getBelowCeilLocation(event.getPlayer().getLocation());
            event.setTo(belowCeiling);
            createSafespace(belowCeiling);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onVehicleMove(VehicleMoveEvent event) {
        if (!LocationUtil.isNetherCeiling(event.getVehicle().getLocation())) return;

        for (Entity passenger : event.getVehicle().getPassengers()) {
            if (passenger.getType() == XEntityType.PLAYER.get()
                    && AnarchyExploitFixes.permissions().permissionValue(passenger, AEFPermission.BYPASS_NETHER_ROOF.node()).toBoolean()) return;
        }

        for (Entity passenger : event.getVehicle().getPassengers()) {
            if (passenger.getType() == XEntityType.PLAYER.get()) {
                teleportFromCeiling((Player) passenger);
            } else {
                passenger.leaveVehicle();
                passenger.remove();
            }
        }

        event.getVehicle().remove();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (AnarchyExploitFixes.permissions().permissionValue(event.getPlayer(), AEFPermission.BYPASS_NETHER_ROOF.node()).toBoolean()) return;

        if (LocationUtil.isNetherCeiling(event.getBlock().getLocation())) {
            event.setCancelled(true);
        }

        if (LocationUtil.isNetherCeiling(event.getPlayer().getLocation())) {
            teleportFromCeiling(event.getPlayer());
        }
    }

    private static Location getBelowCeilLocation(Location location) {
        Location belowRoofCentered = location.toBlockLocation().add(0.5, 0, 0.5);
        belowRoofCentered.setY(AnarchyExploitFixes.config().nether_ceiling_max_y - 7);
        return belowRoofCentered;
    }

    private void teleportFromCeiling(Player player) {
        player.leaveVehicle();
        player.setGliding(false);
        Location belowCeiling = getBelowCeilLocation(player.getLocation());
        player.teleportAsync(belowCeiling).thenAccept(tpSuccess -> {
            if (safe_teleport_enabled && tpSuccess)
                createSafespace(belowCeiling);
        });
    }

    private void createSafespace(Location location) {
        plugin.getServer().getRegionScheduler().execute(plugin, location, () -> {
            // Check block above for liquid or falling block
            Block blockAboveHead = location.clone().add(0, 2, 0).getBlock();
            if (isUnsafe(blockAboveHead) && blockAboveHead.getType() != XMaterial.NETHER_PORTAL.get())
                blockAboveHead.setType(XMaterial.NETHERRACK.get(), false);

            // Create an air pocket for the player
            Block blockAtPlayerLegs = location.getBlock();
            if (!blockAtPlayerLegs.getType().isAir() && blockAtPlayerLegs.getType() != XMaterial.NETHER_PORTAL.get())
                blockAtPlayerLegs.setType(XMaterial.AIR.get(), false);
            Block blockAtPlayerTorso = blockAtPlayerLegs.getRelative(BlockFace.UP);
            if (!blockAtPlayerTorso.getType().isAir() && blockAtPlayerTorso.getType() != XMaterial.NETHER_PORTAL.get())
                blockAtPlayerTorso.setType(XMaterial.AIR.get(), false);

            // Check all sides of air pocket for liquids and fill with netherrack
            for (int i = 0; i < 2; i++) {
                Block airPocketBlock = blockAtPlayerLegs.getRelative(BlockFace.UP, i);
                for (BlockFace face : CARDINAL_FACES) {
                    Block around = airPocketBlock.getRelative(face);
                    if (isUnsafe(around)) around.setType(XMaterial.NETHERRACK.get(), false);
                }
            }

            // Create block below feet if not solid
            Block blockBelowFeet = blockAtPlayerLegs.getRelative(BlockFace.DOWN);
            if (isUnsafe(blockBelowFeet) || blockBelowFeet.getType() == XMaterial.NETHER_PORTAL.get())
                blockBelowFeet.setType(XMaterial.NETHERRACK.get(), true);
        });
    }

    private static boolean isUnsafe(Block block) {
        return block.isLiquid() || block.getType().hasGravity() || !block.isSolid();
    }
}
