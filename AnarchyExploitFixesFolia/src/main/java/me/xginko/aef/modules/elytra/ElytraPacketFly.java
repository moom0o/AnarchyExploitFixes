package me.xginko.aef.modules.elytra;

import com.cryptomorin.xseries.XEntityType;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.time.Duration;
import java.util.UUID;

public class ElytraPacketFly extends AEFModule implements Listener {

    private final long durationMillis;
    private final int maxElytraOpensPerTime;
    private final boolean notify, kickPlayer;

    private Cache<UUID, Integer> elytraOpenCounts;

    public ElytraPacketFly() {
        super("elytra.packet-elytra-fly", false, """
                Cheap patch for future/rusherhack/kamiblue 2b2t elytra fly exploit.""");
        this.maxElytraOpensPerTime = Math.max(1, config.getInt(configPath + ".max-elytra-opens-per-time", 25, """
                The fly exploit causes the player to constantly toggle gliding.\s
                If too many glide toggles occur within a timeframe, they are\s
                most likely using PacketFly.\s
                Still may trigger false positives when players are jumping and\s
                sprinting with elytra equipped, so recommended to play around\s
                with the values."""));
        this.durationMillis = Math.max(1, config.getInt(configPath + ".time-in-seconds", 8, """
                Time in seconds a elytra open count will be remembered by the plugin."""));
        this.notify = config.getBoolean(configPath + ".notify-player-to-disable-packetfly", true, """
                Configure message in lang folder.""");
        this.kickPlayer = config.getBoolean(configPath + ".kick-instead-of-remove-elytra", false, """
                If enabled, player will be kicked with a message instead of\s
                getting their elytra dropped.""");
    }

    @Override
    public void enable() {
        elytraOpenCounts = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(durationMillis)).build();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (elytraOpenCounts != null) {
            elytraOpenCounts.invalidateAll();
            elytraOpenCounts.cleanUp();
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onElytraOpen(EntityToggleGlideEvent event) {
        if (event.getEntityType() != XEntityType.PLAYER.get()) return;

        int elytraOpens = elytraOpenCounts.get(event.getEntity().getUniqueId(), k -> 0);
        elytraOpens++;
        elytraOpenCounts.put(event.getEntity().getUniqueId(), elytraOpens);
        if (elytraOpens <= maxElytraOpensPerTime) return;

        Player player = (Player) event.getEntity();
        elytraOpenCounts.asMap().remove(player.getUniqueId());

        if (kickPlayer) {
            player.kick(AnarchyExploitFixes.translation(player.locale()).elytra_disablePacketElytraFly);
            return;
        }

        PlayerInventory playerInv = player.getInventory();
        if (MaterialUtil.isElytra(playerInv.getChestplate())) {
            ItemStack elytra = playerInv.getChestplate();
            playerInv.setChestplate(null);
            player.getWorld().dropItemNaturally(player.getLocation(), elytra);
        }

        if (notify) {
            player.sendActionBar(AnarchyExploitFixes.translation(player.locale()).elytra_disablePacketElytraFly);
        }
    }
}
