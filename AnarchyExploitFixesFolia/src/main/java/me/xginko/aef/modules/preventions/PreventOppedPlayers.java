package me.xginko.aef.modules.preventions;

import io.papermc.paper.event.player.AsyncChatEvent;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class PreventOppedPlayers extends AEFModule implements Listener {

    private final Set<String> allowedOperators;
    private final boolean shouldLog;

    public PreventOppedPlayers() {
        super("preventions.prevent-opped-players", false,
                "Useful if you suspect a backdoor has happened.");
        this.shouldLog = config.getBoolean(configPath+".log", false);
        this.allowedOperators = new HashSet<>(config.getList(configPath + ".whitelisted-players", List.of("Notch")));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void checkForIllegalOp(Player player) {
        if (allowedOperators.contains(player.getName())) return;

        if (player.isOp() || player.hasPermission("*")) {
            player.setOp(false);
            if (shouldLog) warn("Deopped illegally opped player '"+player.getName()+"'.");
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onMove(PlayerMoveEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onChat(AsyncChatEvent event) {
        checkForIllegalOp(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommand(PlayerCommandPreprocessEvent event) {
        checkForIllegalOp(event.getPlayer());
    }
}