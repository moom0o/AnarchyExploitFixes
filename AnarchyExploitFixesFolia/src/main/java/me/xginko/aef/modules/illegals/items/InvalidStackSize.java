package me.xginko.aef.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.utils.permissions.AEFPermission;
import me.xginko.aef.utils.enums.IllegalHandling;
import me.xginko.aef.utils.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class InvalidStackSize extends IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, checkStored;

    public InvalidStackSize() {
        super("illegals.illegally-stacked-items", false, AEFPermission.BYPASS_ILLEGAL_OVERSTACKED,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_OVERSTACKED.node() + "\n" +
                        "Prevents usage of or reverts items with a higher or lower\n" +
                        "stack size than their vanilla limit.");
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", true);
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items",
                        List.of(XMaterial.TOTEM_OF_UNDYING.get().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (itemStack.getAmount() > itemStack.getMaxStackSize() || itemStack.getAmount() < 1) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (illegalHandling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        switch (legality) {
            case ILLEGAL -> {
                if (itemStack.getAmount() < 1) {
                    itemStack.setAmount(1);
                    return;
                }

                if (itemStack.getAmount() > itemStack.getMaxStackSize()) {
                    itemStack.setAmount(itemStack.getMaxStackSize());
                }
            }
            case CONTAINS_ILLEGAL -> itemStack.setAmount(0);
        }
    }
}
