package me.xginko.aef.modules.combat.auras;

import com.cryptomorin.xseries.XMaterial;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.Action;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.Map;

public class AnchorAuraDelay extends AuraDelayModule {

    public AnchorAuraDelay() {
        super("combat.anchor-aura-delay", 400, 0);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        if (event.getClickedBlock().getType() != XMaterial.RESPAWN_ANCHOR.get()) return;
        if (event.getItem() == null || event.getItem().getType() != XMaterial.GLOWSTONE.get()) return;
        if (event.getPlayer().getWorld().isRespawnAnchorWorks()) return;

        for (Map.Entry<SettingType, Cooldowns> entry : cooldownSettings.entrySet()) {
            if (entry.getKey() != SettingType.GLOBAL && entry.getKey().slot != event.getHand()) continue;

            if (isOnCooldown(event.getPlayer().getUniqueId(), entry.getValue().breakCooldowns, entry.getValue().breakDelayNanos)) {
                event.setCancelled(true);
                if (updateInventory) event.getPlayer().updateInventory();
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (event.getBlock().getType() != XMaterial.RESPAWN_ANCHOR.get()) return;
        if (event.getPlayer().getWorld().isRespawnAnchorWorks()) return;

        for (Map.Entry<SettingType, Cooldowns> entry : cooldownSettings.entrySet()) {
            if (entry.getKey() != SettingType.GLOBAL && entry.getKey().slot != event.getHand()) continue;

            if (isOnCooldown(event.getPlayer().getUniqueId(), entry.getValue().placeCooldowns, entry.getValue().placeDelayNanos)) {
                event.setCancelled(true);
                if (updateInventory) event.getPlayer().updateInventory();
                return;
            }
        }
    }
}