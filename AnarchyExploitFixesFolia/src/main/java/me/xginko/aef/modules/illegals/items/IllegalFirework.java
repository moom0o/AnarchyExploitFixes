package me.xginko.aef.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.enums.IllegalHandling;
import me.xginko.aef.utils.enums.ItemLegality;
import me.xginko.aef.utils.permissions.AEFPermission;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.FireworkMeta;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

public class IllegalFirework extends IllegalItemModule {

    private final int maxPower, minPower, maxEffectsAmount;
    private final boolean checkStored;

    public IllegalFirework() {
        super("illegals.firework", false, AEFPermission.BYPASS_ILLEGAL_FIREWORKS,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_FIREWORKS.node() + "\n" +
                "Prevents usage of or reverts firework items with illegal attributes.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        this.maxPower = config.getInt(configPath + ".max-power", 3);
        this.minPower = config.getInt(configPath + ".min-power", 1);
        this.maxEffectsAmount = config.getInt(configPath + ".max-effect-count", 7);
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() != XMaterial.FIREWORK_ROCKET.get() || !itemStack.hasItemMeta()) {
            return ItemLegality.LEGAL;
        }

        FireworkMeta fireworkMeta = (FireworkMeta) itemStack.getItemMeta();
        if (fireworkMeta.getPower() > maxPower || fireworkMeta.getPower() < minPower) {
            return ItemLegality.ILLEGAL;
        }

        if (fireworkMeta.getEffectsSize() > maxEffectsAmount) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (illegalHandling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        switch (legality) {
            case CONTAINS_ILLEGAL -> itemStack.setAmount(0);
            case ILLEGAL -> {
                FireworkMeta fireworkMeta = (FireworkMeta) itemStack.getItemMeta();
                if (fireworkMeta.getPower() > maxPower)
                    fireworkMeta.setPower(maxPower);
                if (fireworkMeta.getPower() < minPower)
                    fireworkMeta.setPower(minPower);
                if (fireworkMeta.getEffectsSize() > maxEffectsAmount)
                    fireworkMeta.clearEffects();
                itemStack.setItemMeta(fireworkMeta);
            }
        }
    }
}
