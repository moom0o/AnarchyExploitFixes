package me.xginko.aef.modules.chunklimits;

import com.cryptomorin.xseries.XEntityType;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.world.ChunkUnloadEvent;

import java.util.EnumMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;

public class CustomEntityLimit extends AEFModule implements Consumer<ScheduledTask>, Listener {

    private final Map<EntityType, Integer> entityLimits = new EnumMap<>(EntityType.class);
    private final long checkPeriod, minChunkAge;
    private final boolean logIsEnabled, enableChunkAgeSkip, forceLoadEntities;

    private ScheduledTask scheduledTask;

    public CustomEntityLimit() {
        super("chunk-limits.entity-limits.custom-limit", false, """
                Limit specific entity types per chunk.\s
                Read over the defaults at least once before enabling.""");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", true);
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 1200, """
                Check all loaded chunks every x ticks.""");
        this.enableChunkAgeSkip = config.getBoolean(configPath + ".chunk-age-skip.enable", true);
        this.minChunkAge = config.getInt(configPath + ".chunk-age-skip.min-age-in-ticks", 800, """
                How long a chunk has to have been inhabited for it to be checked.\s
                1 second = 20 ticks.""");
        this.forceLoadEntities = config.getBoolean(configPath + ".forceload-entities", false, """
                When a chunk is loaded, entities inside of it are not necessarily\s
                loaded as well. Force loading is worse for performance, but there\s
                might be a scenario where this turns out to be useful.""");

        Map<XEntityType, Integer> defaults = new EnumMap<>(XEntityType.class);
        defaults.put(XEntityType.ARROW, 20);
        defaults.put(XEntityType.FIREBALL, 5);
        defaults.put(XEntityType.SMALL_FIREBALL, 5);
        defaults.put(XEntityType.SNOWBALL, 5);
        defaults.put(XEntityType.WITHER, 16);
        defaults.put(XEntityType.WITHER_SKULL, 10);
        defaults.put(XEntityType.BLAZE, 10);
        defaults.put(XEntityType.CREEPER, 10);
        defaults.put(XEntityType.ENDERMAN, 10);
        defaults.put(XEntityType.MAGMA_CUBE, 10);
        defaults.put(XEntityType.PHANTOM, 10);
        defaults.put(XEntityType.SLIME, 10);
        defaults.put(XEntityType.SKELETON, 10);
        defaults.put(XEntityType.STRAY, 10);
        defaults.put(XEntityType.WITHER_SKELETON, 10);
        defaults.put(XEntityType.SPIDER, 10);
        defaults.put(XEntityType.CAVE_SPIDER, 10);
        defaults.put(XEntityType.ZOMBIE, 10);
        defaults.put(XEntityType.DROWNED, 10);
        defaults.put(XEntityType.HUSK, 10);
        defaults.put(XEntityType.PIGLIN_BRUTE, 10);
        defaults.put(XEntityType.ZOMBIFIED_PIGLIN, 20);
        defaults.put(XEntityType.HOGLIN, 10);
        defaults.put(XEntityType.ZOGLIN, 10);
        defaults.put(XEntityType.CHICKEN, 10);
        defaults.put(XEntityType.PIG, 10);
        defaults.put(XEntityType.SHEEP, 10);
        defaults.put(XEntityType.COW, 10);
        defaults.put(XEntityType.MOOSHROOM, 10);
        defaults.put(XEntityType.WOLF, 10);
        defaults.put(XEntityType.DONKEY, 10);
        defaults.put(XEntityType.HORSE, 10);
        defaults.put(XEntityType.MULE, 10);
        defaults.put(XEntityType.SKELETON_HORSE, 10);
        defaults.put(XEntityType.ZOMBIE_HORSE, 10);
        defaults.put(XEntityType.GOAT, 10);
        defaults.put(XEntityType.LLAMA, 10);
        defaults.put(XEntityType.TRADER_LLAMA, 10);
        defaults.put(XEntityType.BAT, 3);
        defaults.put(XEntityType.CAT, 10);
        defaults.put(XEntityType.OCELOT, 3);
        defaults.put(XEntityType.DOLPHIN, 4);
        defaults.put(XEntityType.ENDERMITE, 3);
        defaults.put(XEntityType.FOX, 10);
        defaults.put(XEntityType.PANDA, 5);
        defaults.put(XEntityType.PARROT, 10);
        defaults.put(XEntityType.POLAR_BEAR, 5);
        defaults.put(XEntityType.RABBIT, 5);
        defaults.put(XEntityType.SILVERFISH, 3);
        defaults.put(XEntityType.STRIDER, 3);
        defaults.put(XEntityType.EVOKER, 15);
        defaults.put(XEntityType.VEX, 15);
        defaults.put(XEntityType.PILLAGER, 15);
        defaults.put(XEntityType.VINDICATOR, 15);
        defaults.put(XEntityType.WITCH, 15);
        defaults.put(XEntityType.RAVAGER, 15);
        defaults.put(XEntityType.AXOLOTL, 10);
        defaults.put(XEntityType.COD, 6);
        defaults.put(XEntityType.SALMON, 6);
        defaults.put(XEntityType.TROPICAL_FISH, 6);
        defaults.put(XEntityType.PUFFERFISH, 3);
        defaults.put(XEntityType.SQUID, 20);
        defaults.put(XEntityType.GLOW_SQUID, 20);
        defaults.put(XEntityType.FROG, 20);
        defaults.put(XEntityType.TADPOLE, 20);
        defaults.put(XEntityType.ALLAY, 20);
        defaults.put(XEntityType.BEE, 15);
        defaults.put(XEntityType.TURTLE, 20);
        defaults.put(XEntityType.GUARDIAN, 20);
        defaults.put(XEntityType.PIGLIN, 25);
        defaults.put(XEntityType.IRON_GOLEM, 15);
        defaults.put(XEntityType.ZOMBIE_VILLAGER, 25);
        defaults.put(XEntityType.WANDERING_TRADER, 10);

        Map<String, Object> compatibleDef = new TreeMap<>();

        for (Map.Entry<XEntityType, Integer> entry : defaults.entrySet()) {
            if (entry.getKey().isSupported()) {
                compatibleDef.put(entry.getKey().get().name(), entry.getValue());
            }
        }

        ConfigSection section = config.getConfigSection(configPath + ".limited-types", compatibleDef, """
                Check the paper api for correct EntityType enums:\s
                https://jd.papermc.io/paper/1.20.6/org/bukkit/entity/EntityType.html\s
                Make sure your minecraft version is matching as well.""");
        for (String configuredEntity : section.getKeys(false)) {
            try {
                Integer maxAmountPerChunk = Integer.parseInt(section.getString(configuredEntity));
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                entityLimits.put(limitedEntity, maxAmountPerChunk);
            } catch (NumberFormatException e) {
                notRecognized(Integer.class, configuredEntity);
            } catch (IllegalArgumentException e) {
                notRecognized(Material.class, configuredEntity);
            }
        }
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkUnload(ChunkUnloadEvent event) {
        if (ChunkUtil.isRetrievalUnsafe(event.getChunk())) return;

        for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {
            final int maxAllowedPerChunk = limit.getValue();

            AtomicInteger count = new AtomicInteger();

            for (Entity entity : event.getChunk().getEntities()) {
                entity.getScheduler().execute(plugin, () -> {
                    if (entity.getType() != limit.getKey()) return;
                    if (count.incrementAndGet() <= maxAllowedPerChunk) return;

                    entity.remove();
                    if (logIsEnabled) info("Removed entity " + entity.getType() + " at " +
                            LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxAllowedPerChunk);
                }, null, 1L);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        if (!entityLimits.containsKey(event.getEntityType())) return;

        final int maxAllowedPerChunk = entityLimits.get(event.getEntityType());
        int entityCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType() != event.getEntityType()) continue;

            entityCount++;
            if (entityCount <= maxAllowedPerChunk) continue;

            entity.remove();
            if (logIsEnabled) info("Removed entity " + entity.getType() + " at " +
                    LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxAllowedPerChunk);
        }
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (!forceLoadEntities && !chunk.isEntitiesLoaded()) return;
                    if (enableChunkAgeSkip && chunk.getInhabitedTime() < minChunkAge) return;

                    Entity[] chunkEntities = chunk.getEntities();

                    for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {
                        AtomicInteger count = new AtomicInteger();
                        for (Entity entity : chunkEntities) {
                            entity.getScheduler().execute(plugin, () -> {
                                if (entity.getType() != limit.getKey()) return;
                                if (count.incrementAndGet() <= limit.getValue()) return;

                                entity.remove();
                                if (logIsEnabled) info("Removed entity " + entity.getType() + " at " +
                                        LocationUtil.toString(entity.getLocation()) + " because reached limit of " + limit.getValue());
                            }, null, 1L);
                        }
                    }
                });
            }
        }
    }
}