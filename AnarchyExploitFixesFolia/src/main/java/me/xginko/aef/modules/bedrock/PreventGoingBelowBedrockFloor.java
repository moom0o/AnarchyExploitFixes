package me.xginko.aef.modules.bedrock;

import me.xginko.aef.modules.AEFModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class PreventGoingBelowBedrockFloor extends AEFModule implements Listener {

    private final Set<String> exemptedWorlds;
    private final Material fillMaterial;
    private final boolean fillHole, vehicleEject, closeElytra, teleport;
    private final double damageOnMove;

    public PreventGoingBelowBedrockFloor() {
        super("bedrock.prevent-going-below-bedrock-floor", true,
                "Prevents players from going below the bedrock floor.");
        this.vehicleEject = config.getBoolean(configPath + ".leave-vehicle", true,
                "Whether to make player leave their vehicle.");
        this.closeElytra = config.getBoolean(configPath + ".stop-elytra", true,
                "Whether to close the player's elytra if they were flying.");
        this.teleport = config.getBoolean(configPath + ".teleport", true,
                "Teleport player on top of that bedrock");
        this.damageOnMove = config.getDouble(configPath + ".damage-when-moving",8.0,
                "1.0 = Half a heart of damage every time you move. Set 0 to disable");
        this.fillHole = config.getBoolean(configPath + ".fill-bedrock-hole", true,
                "Whether the bedrock hole should be filled or not.");
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                List.of("world_the_end", "skyblock_world")));
        String configuredFillMaterial = config.getString(configPath + ".filler-material", "BEDROCK");
        Material filler_material = Material.BEDROCK;
        try {
            filler_material = Material.valueOf(configuredFillMaterial);
        } catch (IllegalArgumentException e) {
            notRecognized(Material.class, configuredFillMaterial);
        }
        this.fillMaterial = filler_material;
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        final Player player = event.getPlayer();
        final World world = player.getWorld();
        if (exemptedWorlds.contains(world.getName())) return;
        final Location playerLoc = player.getLocation();
        if (playerLoc.getY() >= world.getMinHeight()) return;

        if (vehicleEject && player.getVehicle() != null) {
            player.getVehicle().eject();
        }

        if (closeElytra && player.isGliding()) {
            player.setGliding(false);
        }

        if (fillHole) {
            // Place bedrock at the lowest possible valid location in the world
            plugin.getServer().getRegionScheduler().execute(plugin, playerLoc, () ->
                    world.getBlockAt(playerLoc.getBlockX(), world.getMinHeight(), playerLoc.getBlockZ())
                    .setType(fillMaterial, false));
        }

        if (teleport) {
            // Teleport player up, so he lands on top of that bedrock
            Location threeBlocksUp = event.getFrom().clone().add(0, 3, 0);
            event.setTo(threeBlocksUp);
            player.teleportAsync(threeBlocksUp);
        }

        if (damageOnMove > 0) {
            // Deal damage when moving below bedrock. Just in case everything else fails
            // to prevent players from moving below bedrock.
            player.damage(damageOnMove);
        }
    }
}
