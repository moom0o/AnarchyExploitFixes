package me.xginko.aef.modules.lagpreventions.redstoneProtector;

public class RegionData {
    private int currentRedstoneLimit;
    private int currentSlimeLimit;
    private boolean isBlocked;
    private long blockStartTime;
    private long blockDuration;

    public RegionData(int currentRedstoneLimit, int currentSlimeLimit, boolean isBlocked) {
        this.currentRedstoneLimit = currentRedstoneLimit;
        this.currentSlimeLimit = currentSlimeLimit;
        this.isBlocked = isBlocked;
    }

    public int getCurrentRedstoneLimit() {
        return currentRedstoneLimit;
    }

    public void setCurrentRedstoneLimit(int currentRedstoneLimit) {
        this.currentRedstoneLimit = currentRedstoneLimit;
    }

    public int getCurrentSlimeLimit() {
        return currentSlimeLimit;
    }

    public void setCurrentSlimeLimit(int currentSlimeLimit) {
        this.currentSlimeLimit = currentSlimeLimit;
    }

    public boolean isBlocked() {
        if (isBlocked && (System.currentTimeMillis() / 1000) >= (blockStartTime + blockDuration)) {
            isBlocked = false;
        }
        return isBlocked;
    }

    public void setBlocked(boolean blocked, long blockStartTime, long blockDuration) {
        this.isBlocked = blocked;
        this.blockStartTime = blockStartTime;
        this.blockDuration = blockDuration;
    }

    public static int getRegion(int blockX, int blockZ, int regionSize) {
        int regionX = (int) Math.floor((double) blockX / regionSize);
        int regionZ = (int) Math.floor((double) blockZ / regionSize);

        int regionNumber = regionX + regionZ * regionSize;

        return regionNumber;
    }
}
