package me.xginko.aef.modules.illegals.items;

import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.utils.enums.IllegalHandling;
import me.xginko.aef.utils.enums.ItemLegality;
import me.xginko.aef.utils.permissions.AEFPermission;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class BannedItemNames extends IllegalItemModule {

    private final Set<Pattern> bannedRegex;
    private final Set<Material> whitelistedTypes;
    private final boolean delete;

    public BannedItemNames() {
        super("illegals.banned-item-names", false, AEFPermission.BYPASS_ILLEGAL_BANNEDNAME,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_BANNEDNAME.node() + "\n" +
                        "Resets an item's name (or deletes the item) if it matches one of\n" +
                        "the configured regexes.\n" +
                        "Regexes can be complex. Use a tool like https://regex101.com/ or\n" +
                        "ChatGPT for good results.");
        this.delete = config.getBoolean(configPath + ".delete-item", false,
                "Will delete the item instead of resetting the name.");
        this.bannedRegex = config.getList(configPath + ".regex", List.of("(?i)illegalstring"))
                .stream()
                .map(Pattern::compile)
                .collect(Collectors.toCollection(HashSet::new));
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items",
                        Collections.singletonList("DIRT"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        if (handling == IllegalHandling.STRICT) {
            // Add listener for preview in anvil (for example)
            optionalListeners.add(new Listener() {
                @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
                private void onPrepareResult(PrepareResultEvent event) {
                    if (AnarchyExploitFixes.permissions().permissionValue(event.getView().getPlayer(), bypassPermission.node()).toBoolean()) return;

                    ItemStack resultItem = event.getResult();
                    if (legalityOf(resultItem) == ItemLegality.ILLEGAL) {
                        handleItem(resultItem, ItemLegality.ILLEGAL);
                        event.setResult(resultItem);
                    }
                }
            });
        }
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (
                itemStack == null
                || whitelistedTypes.contains(itemStack.getType())
                || !itemStack.hasItemMeta()
                || !itemStack.getItemMeta().hasDisplayName()
        ) {
            return ItemLegality.LEGAL;
        }

        final String displayName = PlainTextComponentSerializer.plainText().serialize(itemStack.displayName());

        for (Pattern pattern : bannedRegex) {
            if (pattern.matcher(displayName).find()) {
                return ItemLegality.ILLEGAL;
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        if (legality == ItemLegality.ILLEGAL) {
            if (delete) {
                itemStack.setAmount(0);
            } else {
                ItemMeta meta = itemStack.getItemMeta();
                meta.displayName(null);
                itemStack.setItemMeta(meta);
            }
        }
    }
}
