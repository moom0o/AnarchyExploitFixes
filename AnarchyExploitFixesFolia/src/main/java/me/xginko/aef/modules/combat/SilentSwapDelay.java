package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.inventory.InventoryInteractEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;

public class SilentSwapDelay extends AEFModule implements Listener {

    private final long cooldownNanos;
    private final boolean updateInventory;

    private Map<UUID, Long> swapItemCooldowns;

    public SilentSwapDelay() {
        super("combat.silent-swap-delay", false);
        this.updateInventory = config.getBoolean(configPath + ".update-inventory-on-cancel", false,
                "Can help with desync but recommended to leave off unless you have issues.");
        this.cooldownNanos = TimeUnit.MILLISECONDS.toNanos(config.getLong(configPath + ".min-swap-delay-millis", 40L,"""
               The delay in millis a player cant swap hotbar items after placing
               a block, clicking a block (for example to place a crystal) or
               damaging an entity. (50 ms = 1 tick)"""));
    }

    @Override
    public void enable() {
        swapItemCooldowns = new ConcurrentHashMap<>();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (swapItemCooldowns != null) {
            swapItemCooldowns.clear();
            swapItemCooldowns = null;
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerItemHeld(PlayerItemHeldEvent event) { // Fired when a hot bar item selection changes
        if (!swapItemCooldowns.containsKey(event.getPlayer().getUniqueId())) return;

        if (swapItemCooldowns.get(event.getPlayer().getUniqueId()) > System.nanoTime()) {
            event.setCancelled(true);
            if (updateInventory) event.getPlayer().updateInventory();
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventoryInteract(InventoryInteractEvent event) {
        if (!swapItemCooldowns.containsKey(event.getWhoClicked().getUniqueId())) return;

        if (swapItemCooldowns.get(event.getWhoClicked().getUniqueId()) > System.nanoTime()) {
            event.setCancelled(true);
            if (updateInventory) ((Player) event.getWhoClicked()).updateInventory();
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onEntityDamageByEntity(EntityDamageByEntityEvent event) {
        if (event.getDamager().getType() == XEntityType.PLAYER.get()) {
            swapItemCooldowns.put(event.getDamager().getUniqueId(), System.nanoTime() + cooldownNanos);
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        swapItemCooldowns.put(event.getPlayer().getUniqueId(), System.nanoTime() + cooldownNanos);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        swapItemCooldowns.put(event.getPlayer().getUniqueId(), System.nanoTime() + cooldownNanos);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        swapItemCooldowns.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerKick(PlayerKickEvent event) {
        swapItemCooldowns.remove(event.getPlayer().getUniqueId());
    }
}