package me.xginko.aef.modules.chunklimits;

import com.cryptomorin.xseries.XEntityType;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ProjectileHitEvent;
import org.bukkit.event.entity.ProjectileLaunchEvent;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ProjectileLimit extends AEFModule implements Consumer<ScheduledTask>, Listener {

    private final Set<EntityType> exemptEntities;
    private final long checkPeriod;
    private final int maxProjectilesPerChunk;
    private final boolean logIsEnabled;

    private ScheduledTask scheduledTask;

    public ProjectileLimit() {
        super("chunk-limits.projectile-limit", true, """
                Prevent players from crashing the server or other players by\s
                creating a ton of projectile entities, then loading them at once.""");
        this.logIsEnabled = config.getBoolean(configPath + ".log", false);
        this.maxProjectilesPerChunk = config.getInt(configPath + ".max-projectiles-per-chunk", 25);
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 800,
                "20 ticks = 1 second");
        final List<String> defaults = Stream.of(
                XEntityType.ENDER_PEARL,
                XEntityType.FISHING_BOBBER)
                .filter(XEntityType::isSupported)
                .map(XEntityType::get)
                .map(Enum::name)
                .collect(Collectors.toList());
        this.exemptEntities = config.getList(configPath + ".whitelisted-types", defaults)
                .stream()
                .map(configuredEntity -> {
                    try {
                        return EntityType.valueOf(configuredEntity);
                    } catch (IllegalArgumentException e) {
                        notRecognized(EntityType.class, configuredEntity);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) {
            scheduledTask.cancel();
            scheduledTask = null;
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onProjectileLaunch(ProjectileLaunchEvent event) {
        int projectilesCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (exemptEntities.contains(entity.getType()) || !EntityUtil.isProjectile(entity)) continue;

            projectilesCount++;

            if (projectilesCount > maxProjectilesPerChunk) {
                event.setCancelled(true);
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onProjectileHit(ProjectileHitEvent event) {
        int projectilesCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (exemptEntities.contains(entity.getType()) || !EntityUtil.isProjectile(entity)) continue;

            projectilesCount++;

            if (projectilesCount > maxProjectilesPerChunk) {
                entity.remove();
                if (logIsEnabled) info("Removed Projectile at " + LocationUtil.toString(entity.getLocation()) +
                        " because reached limit of " + maxProjectilesPerChunk);
            }
        }
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (!chunk.isEntitiesLoaded()) return;

                    AtomicInteger projectileCount = new AtomicInteger();

                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().execute(plugin, () -> {
                            if (exemptEntities.contains(entity.getType()) || !EntityUtil.isProjectile(entity)) return;
                            if (projectileCount.incrementAndGet() <= maxProjectilesPerChunk) return;

                            entity.remove();
                            if (logIsEnabled) info("Removed Projectile at " + LocationUtil.toString(entity.getLocation()) +
                                    " because reached limit of " + maxProjectilesPerChunk);
                        }, null, 1L);
                    }
                });
            }
        }
    }
}