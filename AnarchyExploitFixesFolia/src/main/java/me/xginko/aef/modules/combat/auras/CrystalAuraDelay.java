package me.xginko.aef.modules.combat.auras;

import com.cryptomorin.xseries.XEntityType;
import com.cryptomorin.xseries.XMaterial;
import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.Map;

public class CrystalAuraDelay extends AuraDelayModule {

    public CrystalAuraDelay() {
        super("combat.crystal-aura.regular-delay", 0, 200);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPrePlayerAttackEntity(PrePlayerAttackEntityEvent event) {
        if (event.getAttacked().getType() != XEntityType.END_CRYSTAL.get()) return;

        for (Map.Entry<SettingType, Cooldowns> entry : cooldownSettings.entrySet()) {
            if (entry.getKey() != SettingType.GLOBAL && entry.getKey().slot != event.getPlayer().getActiveItemHand()) continue;

            if (isOnCooldown(event.getPlayer().getUniqueId(), entry.getValue().breakCooldowns, entry.getValue().breakDelayNanos)) {
                event.setCancelled(true);
                if (updateInventory) event.getPlayer().updateInventory();
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerInteract(PlayerInteractEvent event) {
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return; // Need to right-click a block to place a crystal
        if (event.getItem() == null || event.getItem().getType() != XMaterial.END_CRYSTAL.get()) return;

        for (Map.Entry<SettingType, Cooldowns> entry : cooldownSettings.entrySet()) {
            if (entry.getKey() != SettingType.GLOBAL && entry.getKey().slot != event.getHand()) continue;

            if (isOnCooldown(event.getPlayer().getUniqueId(), entry.getValue().placeCooldowns, entry.getValue().placeDelayNanos)) {
                event.setCancelled(true);
                if (updateInventory) event.getPlayer().updateInventory();
                return;
            }
        }
    }
}