package me.xginko.aef.modules.bedrock;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import org.bukkit.Chunk;
import org.bukkit.World;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;

public class PeriodicallyFillOverworldFloor extends AEFModule implements Consumer<ScheduledTask> {

    private ScheduledTask scheduledTask;
    private final Set<String> exemptedWorlds;
    private final long checkPeriod;
    private final double pauseTPS;
    private final boolean pauseOnLowTPS;

    public PeriodicallyFillOverworldFloor() {
        super("bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill");
        config.addComment(configPath + ".enable","Only checks loaded chunks.");
        this.checkPeriod = config.getInt(configPath + ".check-period-in-seconds", 10) * 20L;
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                List.of("exampleworld", "exampleworld2"),
                "Uses the exact name of the world's folder in your server directory."));
        this.pauseOnLowTPS = config.getBoolean(configPath + ".pause-on-low-tps", true, """
                Pauses the task during low tps to avoid lag.""");
        this.pauseTPS = config.getDouble(configPath + ".pause-tps", 16.0, """
                The TPS at which bedrock filling will pause to avoid adding to the lag.""");
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @Override
    public void accept(ScheduledTask task) {
        if (pauseOnLowTPS && AnarchyExploitFixes.tickReporter().getGlobalTPS() <= pauseTPS) return;

        for (World world : plugin.getServer().getWorlds()) {
            if (world.getEnvironment() != World.Environment.NORMAL) continue;
            if (exemptedWorlds.contains(world.getName())) continue;

            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (!chunk.isEntitiesLoaded()) return;
                    if (pauseOnLowTPS && AnarchyExploitFixes.tickReporter().getTPS() <= pauseTPS) return;

                    ChunkUtil.createBedrockLayer(chunk, world.getMinHeight());
                });
            }
        }
    }
}
