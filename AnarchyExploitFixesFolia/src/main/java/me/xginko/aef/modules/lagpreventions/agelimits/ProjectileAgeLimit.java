package me.xginko.aef.modules.lagpreventions.agelimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.function.Consumer;

public class ProjectileAgeLimit extends AEFModule implements Consumer<ScheduledTask>, Listener {

    private ScheduledTask scheduledTask;
    private final long check_period_in_ticks;
    private final int max_alive_time;

    public ProjectileAgeLimit() {
        super("lag-preventions.entity-age-limits.projectile-limit");
        config.addComment(configPath + ".enable",
                "Patches any lag exploit that abuses spawning a ton of projectile entities\n" +
                        "(ex. Snowball exploit)." +
                        "Skips over the following entities: ENDER_PEARL, FISHING_HOOK, WITHER_SKULL\n" +
                        "and ENDER_SIGNAL. You can configure those separately in the custom entity age\n" +
                        "limit section.");
        this.max_alive_time = config.getInt(configPath + ".max-alive-time-ticks", 300,
                "(20 ticks = 1 second) Will not touch Ender Pearls");
        this.check_period_in_ticks = config.getInt(configPath + ".check-period-seconds", 20,
                "How frequently we should check all projectiles for their alive time") * 20L;
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, check_period_in_ticks, check_period_in_ticks);
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().execute(plugin, () -> {
                            if (EntityUtil.isProjectile(entity)) {
                                switch (entity.getType()) {
                                    case ENDER_PEARL, WITHER_SKULL, FISHING_HOOK, ENDER_SIGNAL -> {
                                        return;
                                    }
                                }
                                if (entity.getTicksLived() > max_alive_time) {
                                    entity.remove();
                                }
                            }
                        }, null, 1L);
                    }
                });
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;
        if (ChunkUtil.isRetrievalUnsafe(event.getChunk())) return;

        for (Entity entity : event.getChunk().getEntities()) {
            entity.getScheduler().execute(plugin, () -> {
                if (EntityUtil.isProjectile(entity)) {
                    switch (entity.getType()) {
                        case ENDER_PEARL, WITHER_SKULL, FISHING_HOOK, ENDER_SIGNAL -> {
                            return;
                        }
                    }
                    if (entity.getTicksLived() > max_alive_time) {
                        entity.remove();
                    }
                }
            }, null, 1L);
        }
    }
}
