package me.xginko.aef.modules.lagpreventions.agelimits;

import com.cryptomorin.xseries.XEntityType;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class ProjectileAgeLimit extends AEFModule implements Consumer<ScheduledTask>, Listener {

    private final Set<EntityType> ignoredTypes;
    private final long check_period_in_ticks;
    private final int max_alive_time;

    private ScheduledTask scheduledTask;

    public ProjectileAgeLimit() {
        super("lag-preventions.entity-age-limits.projectile-limit", false, """
              Patches any lag exploit that abuses spawning a ton of projectile entities
              (ex. Snowball exploit).
              Skips over the following entities: ENDER_PEARL, FISHING_HOOK, WITHER_SKULL
              and ENDER_SIGNAL. You can configure those separately in the custom entity age
              limit section.""");
        this.max_alive_time = config.getInt(configPath + ".max-alive-time-ticks", 300,
                "(20 ticks = 1 second) Will not touch Ender Pearls");
        this.check_period_in_ticks = config.getInt(configPath + ".check-period-seconds", 20,
                "How frequently we should check all projectiles for their alive time") * 20L;
        List<String> defaults = Stream.of(
                        XEntityType.FISHING_BOBBER,
                        XEntityType.ENDER_PEARL,
                        XEntityType.WITHER_SKULL,
                        XEntityType.EYE_OF_ENDER)
                .filter(XEntityType::isSupported)
                .map(XEntityType::get)
                .map(Enum::name)
                .collect(Collectors.toList());
        this.ignoredTypes = config.getList(configPath + ".ignored-types", defaults)
                .stream()
                .map(configuredType -> {
                    try {
                        return EntityType.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(EntityType.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));
    }

    @Override
    public void enable() {
        scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, check_period_in_ticks, check_period_in_ticks);
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) {
            scheduledTask.cancel();
            scheduledTask = null;
        }
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().execute(plugin, () -> {
                            if (ignoredTypes.contains(entity.getType())) {
                                return;
                            }

                            if (EntityUtil.isProjectile(entity) && entity.getTicksLived() > max_alive_time) {
                                entity.remove();
                            }
                        }, null, 1L);
                    }
                });
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;
        if (ChunkUtil.isRetrievalUnsafe(event.getChunk())) return;

        for (Entity entity : event.getChunk().getEntities()) {
            entity.getScheduler().execute(plugin, () -> {
                if (ignoredTypes.contains(entity.getType())) {
                    return;
                }

                if (EntityUtil.isProjectile(entity) && entity.getTicksLived() > max_alive_time) {
                    entity.remove();
                }
            }, null, 1L);
        }
    }
}
