package me.xginko.aef.modules.patches;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityTeleportEvent;

import java.time.Duration;
import java.util.UUID;

public class WorldChangeCrash extends AEFModule implements Listener {

    private final long worldChangeDelayMillis;
    private final boolean shouldLog;

    private ExpiringSet<UUID> recentWorldChangers;

    public WorldChangeCrash() {
        super("patches.prevent-fast-world-teleport-crash", false, """
                Prevents crash methods that involve very fast teleporting between\s
                different worlds in a short time.""");
        this.worldChangeDelayMillis = Math.max(1, config.getInt(configPath + ".teleport-delay-millis", 1000, """
                Time in milliseconds until an entity can teleport to another\s
                world again."""));
        this.shouldLog = config.getBoolean(configPath + ".log", false);
    }

    @Override
    public void enable() {
        recentWorldChangers = new ExpiringSet<>(Duration.ofMillis(worldChangeDelayMillis));
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (recentWorldChangers != null) {
            recentWorldChangers.clear();
            recentWorldChangers.cleanUp();
            recentWorldChangers = null;
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(EntityTeleportEvent event) {
        if (event.getTo() == null) return;
        if (event.getFrom().getWorld().getUID().equals(event.getTo().getWorld().getUID())) return;

        if (recentWorldChangers.contains(event.getEntity().getUniqueId())) {
            event.setCancelled(true);
            if (shouldLog) info("Cancelled too fast world teleport of entity: " + event.getEntityType().name() +
                    " at " + LocationUtil.toString(event.getFrom()));
        } else {
            recentWorldChangers.add(event.getEntity().getUniqueId());
        }
    }
}
