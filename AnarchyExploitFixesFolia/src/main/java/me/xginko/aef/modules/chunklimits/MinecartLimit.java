package me.xginko.aef.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;

public class MinecartLimit extends AEFModule implements Consumer<ScheduledTask>, Listener {

    private final long checkPeriod;
    private final int maxMinecartsPerChunk;
    private final boolean logIsEnabled;

    private ScheduledTask scheduledTask;

    public MinecartLimit() {
        super("chunk-limits.minecart-limit", false, """
                Limit the amount of minecarts to prevent lag caused by collisions.""");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", false);
        this.maxMinecartsPerChunk = config.getInt(configPath + ".max-minecarts-per-chunk", 25);
        this.checkPeriod = Math.max(1, config.getInt(configPath + ".check-period-in-ticks", 400));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) {
            scheduledTask.cancel();
            scheduledTask = null;
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        Vehicle vehicle = event.getVehicle();
        if (!EntityUtil.MINECARTS.contains(vehicle.getType())) return;

        int minecartCount = 0;
        for (Entity entity : vehicle.getChunk().getEntities()) {
            if (!EntityUtil.MINECARTS.contains(entity.getType())) continue;

            minecartCount++;
            if (minecartCount <= maxMinecartsPerChunk) continue;

            entity.getScheduler().execute(plugin, () -> {
                entity.remove();
                if (logIsEnabled)
                    info("Removed minecart " + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                        " because reached limit of " + maxMinecartsPerChunk);
            }, null, 1L);
        }
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (!chunk.isEntitiesLoaded()) return;

                    AtomicInteger minecartCount = new AtomicInteger();

                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().execute(plugin, () -> {
                            if (
                                    !EntityUtil.MINECARTS.contains(entity.getType())
                                    || minecartCount.incrementAndGet() <= maxMinecartsPerChunk
                            ) return;

                            entity.remove();
                            if (logIsEnabled)
                                info("Removed minecart " + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                                        " because reached limit of " + maxMinecartsPerChunk);
                        }, null, 1L);
                    }
                });
            }
        }
    }
}
