package me.xginko.aef.modules.illegals.items;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.IllegalHandling;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.PotionMeta;
import org.checkerframework.checker.nullness.qual.Nullable;
import org.jetbrains.annotations.NotNull;

public class IllegalPotions extends IllegalItemModule {

    private final boolean checkStored;

    public IllegalPotions() {
        super("illegals.potions", false, AEFPermission.BYPASS_ILLEGAL_POTIONS,
                "Bypass permission: " + AEFPermission.BYPASS_ILLEGAL_POTIONS.string() + "\n" +
                        "Prevents usage of or reverts items with any attribute modifiers\n" +
                        "or item flags.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
    }

    @Override
    public @NotNull ItemLegality legalityOf(@Nullable ItemStack itemStack) {
        if (itemStack == null || !MaterialUtil.POTIONS.contains(itemStack.getType()) || !itemStack.hasItemMeta()) {
            return ItemLegality.LEGAL;
        }

        PotionMeta potionMeta = (PotionMeta) itemStack.getItemMeta();
        if (potionMeta.hasCustomEffects() || potionMeta.hasColor()) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (handling == IllegalHandling.PREVENT_USE_ONLY) return; // We are cancelling the action in the super class

        switch (legality) {
            case CONTAINS_ILLEGAL -> itemStack.setAmount(0);
            case ILLEGAL -> {
                PotionMeta potionMeta = (PotionMeta) itemStack.getItemMeta();
                potionMeta.setColor(null);
                potionMeta.clearCustomEffects();
                itemStack.setItemMeta(potionMeta);
            }
        }
    }
}
