package me.xginko.aef.modules.lagpreventions.regionalactivity;

import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.BlockExplodeEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;

public class Explosions extends RegionalActivityModule {

    private final int limit;

    public Explosions() {
        super(
                "explosions",
                false,
                true,
                1500.0,
                6000,
                10000,
                10.0,
                120.0,
                """
                Limits explosions within a configurable radius and timeframe\s
                to help reduce lag by cancelling high activity hotspots.\s
                \s
                Examples:\s
                \s
                - A block exploding.\s
                - An entity exploding.\s
                - An entity making the decision to explode."""
        );
        this.limit = config.getInt(configPath + ".explode-event-limit", 500,
                "Maximum number of explode events within the configured timeframe\n" +
                        "before the region will be put on cooldown.");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onExplosionPrime(ExplosionPrimeEvent event) {
        if (shouldCancelActivity(event, event.getEntity().getLocation(), limit)) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityExplode(EntityExplodeEvent event) {
        if (shouldCancelActivity(event, event.getLocation(), limit)) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockExplode(BlockExplodeEvent event) {
        if (shouldCancelActivity(event, event.getBlock().getLocation(), limit)) {
            event.setCancelled(true);
        }
    }
}
