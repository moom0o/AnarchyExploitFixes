package me.xginko.aef.modules.packets;

import com.destroystokyo.paper.event.player.PlayerPostRespawnEvent;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClientStatus;
import me.xginko.aef.utils.PlatformUtil;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;

import java.time.Duration;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.atomic.AtomicInteger;

public class BedTrap extends PacketModule implements Listener {

    private static final Set<UUID> DEAD_PLAYERS = new CopyOnWriteArraySet<>();
    private final Cache<UUID, AtomicInteger> playerDeathNearBedCount;
    private final int maxDeathsPerTime;
    private final boolean shouldLog;

    public BedTrap() {
        super("preventions.anti-bed-trap", PacketListenerPriority.MONITOR);
        config.addComment(configPath + ".enable", """
                Resets a players bed respawn they die too many times within\s
                a certain timeframe.""");
        this.maxDeathsPerTime = config.getInt(configPath + ".max-deaths-per-time", 7, """
                Amount of times player can die until he is determined as bed-trapped.""");
        this.playerDeathNearBedCount = Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(Math.max(1,
                config.getInt(configPath + ".time-in-seconds", 5, """
                        "Time until death counter will be reset again.""")))).build();
        this.shouldLog = config.getBoolean(configPath+".log", false);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (PlatformUtil.isFolia()) PacketEvents.getAPI().getEventManager().registerListener(asAbstract);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (PlatformUtil.isFolia()) PacketEvents.getAPI().getEventManager().unregisterListener(asAbstract);
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerDeath(PlayerDeathEvent event) {
        DEAD_PLAYERS.add(event.getPlayer().getUniqueId());
    }

    @SuppressWarnings("deprecation")
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerPostRespawn(PlayerPostRespawnEvent event) {
        Player player = event.getPlayer();
        if (!event.isBedSpawn()) return;

        if (playerDeathNearBedCount.get(player.getUniqueId(), k -> new AtomicInteger()).incrementAndGet() <= maxDeathsPerTime) {
            return;
        }

        player.getScheduler().execute(plugin, () -> {
            try {
                player.setRespawnLocation(null, true);
            } catch (NoSuchMethodError e) {
                player.setBedSpawnLocation(null, true);
            }
            if (shouldLog) info("Reset bed respawn of potentially bed-trapped player '" + player.getName() + "'");
        }, null, 1L);
    }

    /**
     *  Needed on folia since PlayerPostRespawnEvent does not fire
     */
    @Override
    @SuppressWarnings("deprecation")
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.isCancelled()) return;
        if (event.getPacketType() != PacketType.Play.Client.CLIENT_STATUS) return;
        WrapperPlayClientClientStatus packet = new WrapperPlayClientClientStatus(event);
        if (packet.getAction() != WrapperPlayClientClientStatus.Action.PERFORM_RESPAWN) return;

        Player player = (Player) event.getPlayer();
        if (player == null) return;

        if (!DEAD_PLAYERS.contains(player.getUniqueId()) && !player.isDead()) {
            return;
        }

        player.getScheduler().execute(plugin, () -> {
            Location potentialBedSpawn = player.getPotentialBedLocation();
            if (potentialBedSpawn == null || potentialBedSpawn.distanceSquared(player.getLocation()) > 16) return;

            if (playerDeathNearBedCount.get(player.getUniqueId(), k -> new AtomicInteger()).incrementAndGet() <= maxDeathsPerTime) {
                return;
            }

            try {
                player.setRespawnLocation(null, true);
            } catch (NoSuchMethodError e) {
                player.setBedSpawnLocation(null, true);
            }

            if (shouldLog) info("Reset bed respawn of potentially bed-trapped player '" + player.getName() + "'");


            DEAD_PLAYERS.remove(player.getUniqueId());
        }, null, 20L);
    }
}