package me.xginko.aef.modules.lagpreventions;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class DisableCustomEntities extends AEFModule implements Listener {

    private final Set<EntityType> disabledEntities;

    public DisableCustomEntities() {
        super("lag-preventions.disable-entity-spawns", false,"""
               Prevent certain entity types from spawning to combat lag.
               Fish types are enabled by default on newer versions since they
               can cause a ton of lag.""");

        List<String> defaults = Stream.of(
                XEntityType.COD,
                XEntityType.SALMON,
                XEntityType.PUFFERFISH,
                XEntityType.TROPICAL_FISH,
                XEntityType.BAT,
                XEntityType.PHANTOM)
                .filter(XEntityType::isSupported)
                .map(XEntityType::get)
                .map(Enum::name)
                .toList();

        this.disabledEntities = config.getList(configPath + ".types", defaults)
                .stream()
                .map(configuredType -> {
                    try {
                        return EntityType.valueOf(configuredType);
                    } catch (IllegalArgumentException exception) {
                        notRecognized(EntityType.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntitySpawn(EntitySpawnEvent event) {
        if (disabledEntities.contains(event.getEntityType())) {
            event.setCancelled(true);
        }
    }
}
