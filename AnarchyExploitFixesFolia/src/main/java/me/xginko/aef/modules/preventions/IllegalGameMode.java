package me.xginko.aef.modules.preventions;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import io.papermc.paper.event.player.AsyncChatEvent;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.GameMode;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class IllegalGameMode extends AEFModule implements Listener {

    private final Map<String, GameMode> worldSettings;
    private final Set<String> allowedGamemodePlayers;
    private final GameMode defaultGamemode;
    private final boolean shouldLog;

    public IllegalGameMode() {
        super("preventions.illegal-gamemode", false, """
                Forces GameMode for players not in the whitelist.\s
                Useful protection against past and future backdoor incidents""");
        this.shouldLog = config.getBoolean(configPath+".log", true);

        GameMode gameMode;
        String configuredGamemode = config.getString(configPath + ".default-gamemode", GameMode.SURVIVAL.name(),
                "GameModes: " + Arrays.stream(GameMode.values()).map(Enum::name).collect(Collectors.joining(", ")));
        try {
            gameMode = GameMode.valueOf(configuredGamemode);
        } catch (IllegalArgumentException e) {
            notRecognized(GameMode.class, configuredGamemode);
            gameMode = GameMode.SURVIVAL;
        }
        this.defaultGamemode = gameMode;

        Map<String, Object> defaults = new HashMap<>(3);
        defaults.put("world", GameMode.SURVIVAL.name());
        defaults.put("world_nether", GameMode.SURVIVAL.name());
        defaults.put("world_the_end", GameMode.SURVIVAL.name());

        ConfigSection section = config.getConfigSection(configPath + ".world-gamemodes", defaults);
        List<String> worlds = section.getKeys(false);
        this.worldSettings = new HashMap<>(worlds.size());
        for (String world : worlds) {
            try {
                worldSettings.put(world, GameMode.valueOf(section.getString(world)));
            } catch (IllegalArgumentException e) {
                notRecognized(GameMode.class, world);
            }
        }

        this.allowedGamemodePlayers = new HashSet<>(config.getList(configPath + ".whitelisted-players",
                List.of("Notch")));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void checkForIllegalGameMode(HumanEntity player) {
        if (allowedGamemodePlayers.contains(player.getName())) return;

        GameMode targetGamemode = worldSettings.getOrDefault(player.getWorld().getName(), defaultGamemode);

        if (player.getGameMode() != targetGamemode) {
            if (shouldLog) warn(player.getName() + " is GameMode " + player.getGameMode().name() +
                    " in world " + player.getWorld().getName() + ". Setting to " + targetGamemode.name());
            player.setGameMode(targetGamemode);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventory(InventoryEvent event) {
        checkForIllegalGameMode(event.getView().getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        checkForIllegalGameMode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onMove(PlayerMoveEvent event) {
        checkForIllegalGameMode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onChat(AsyncChatEvent event) {
        checkForIllegalGameMode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommand(PlayerCommandPreprocessEvent event) {
        checkForIllegalGameMode(event.getPlayer());
    }
}
