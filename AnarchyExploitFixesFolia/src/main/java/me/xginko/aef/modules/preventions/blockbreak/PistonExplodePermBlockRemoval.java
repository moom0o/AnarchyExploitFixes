package me.xginko.aef.modules.preventions.blockbreak;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class PistonExplodePermBlockRemoval extends AEFModule implements Listener {

    private final Set<String> whitelistedWorlds;

    public PistonExplodePermBlockRemoval() {
        super("preventions.permanent-block-breaking.by-exploding-pistons", true);
        this.whitelistedWorlds = new HashSet<>(config.getList(configPath + ".whitelisted-worlds", List.of("example_world_name")));
        config.getBoolean(configPath + ".only-for-portals-and-gateways", false,
                "If enabled, will only protect portals and end gateways");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityExplode(EntityExplodeEvent event) {
        if (whitelistedWorlds.contains(event.getEntity().getWorld().getName())) return;

        event.blockList().removeIf(block -> {
            if (!MaterialUtil.PISTONS.contains(block.getType())) return false;

            for (BlockFace face : BlockFace.values()) {
                // Check if any side of the piston touches an indestructible block
                if (MaterialUtil.INDESTRUCTIBLES.contains(block.getRelative(face).getType())) {
                    // Schedule remove task for each piston location to ensure we are always on the correct thread
                    plugin.getServer().getRegionScheduler().runDelayed(plugin, block.getLocation(), remove ->
                            block.setType(XMaterial.AIR.get()), 5);
                    return true; // Remove piston from the list of blocks to be affected by the explosion
                }
            }

            return false;
        });
    }
}
