package me.xginko.aef.modules.dupepreventions;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDropItemEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.vehicle.VehicleEnterEvent;

public class AllayDupe extends AEFModule implements Listener {

    private final boolean dismount;

    public AllayDupe() {
        super("dupe-preventions.allay-dupe", false, """
                Will prevent allays from entering vehicles to prevent a duplication exploit
                confirmed working in 1.19.4.""");
        this.dismount = config.getBoolean(configPath + ".dismount-premounted-allays", true);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onVehicleEnter(VehicleEnterEvent event) {
        if (event.getEntered().getType() == XEntityType.ALLAY.get()) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityPickupItem(EntityPickupItemEvent event) {
        if (event.getEntityType() != XEntityType.ALLAY.get()) return;

        if (event.getEntity().isInsideVehicle()) {
            event.setCancelled(true);
            if (dismount)
                event.getEntity().getScheduler().execute(plugin, event.getEntity()::leaveVehicle, null, 10);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityDropItem(EntityDropItemEvent event) {
        if (event.getEntityType() != XEntityType.ALLAY.get()) return;

        if (event.getEntity().isInsideVehicle()) {
            event.setCancelled(true);
            if (dismount)
                event.getEntity().getScheduler().execute(plugin, event.getEntity()::leaveVehicle, null, 10);
        }
    }
}
