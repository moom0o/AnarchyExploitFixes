package me.xginko.aef.modules.preventions.portals;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.PlatformUtil;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.entity.EntityPortalEvent;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class PreventSpecificEntitiesInPortals extends AEFModule implements Listener {

    private final Set<EntityType> forbiddenTypes;

    public PreventSpecificEntitiesInPortals() {
        super("preventions.portals.prevent-specific-types", true, """
                Configure entities here that you suspect might be used in a dupe\s
                with portals.\s
                CAUTION: Will kill the entity on folia due to broken portal event.\s
                There is sadly no other efficient way.""");
        List<String> defaults = Stream.of(
                XEntityType.ITEM,
                XEntityType.FIREWORK_ROCKET,
                XEntityType.TNT,
                XEntityType.EXPERIENCE_BOTTLE,
                XEntityType.EXPERIENCE_ORB,
                XEntityType.ARMOR_STAND)
                .filter(XEntityType::isSupported)
                .map(XEntityType::get)
                .map(Enum::name)
                .toList();
        this.forbiddenTypes = config.getList(configPath + ".entities", defaults,
                "Defaults prevent common lag methods.")
                .stream()
                .map(configuredType -> {
                    try {
                        return EntityType.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(EntityType.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalUse(EntityPortalEvent event) { // Does not fire on folia due to broken API
        if (forbiddenTypes.contains(event.getEntityType())) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!PlatformUtil.isFolia()) return; // Avoid fallback logic on non-folia

        if (forbiddenTypes.contains(event.getEntityType()) && event.getEntityType() != XEntityType.PLAYER.get()) {
            event.getEntity().getScheduler().execute(plugin, event.getEntity()::remove, null, 1L);
        }
    }
}
