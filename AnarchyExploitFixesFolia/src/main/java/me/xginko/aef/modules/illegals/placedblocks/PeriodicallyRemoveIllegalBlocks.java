package me.xginko.aef.modules.illegals.placedblocks;

import com.cryptomorin.xseries.XMaterial;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;

import java.util.EnumSet;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class PeriodicallyRemoveIllegalBlocks extends AEFModule implements Consumer<ScheduledTask> {

    private final Set<Material> blocksToRemove;
    private final Set<String> exemptedWorlds;
    private final long checkPeriod;
    private final double pauseTPS;
    private final boolean checkShouldPauseOnLowTPS;

    private ScheduledTask scheduledTask;

    public PeriodicallyRemoveIllegalBlocks() {
        super("illegals.remove-placed-blocks.periodically", false);
        List<String> defaults = Stream.of(
                XMaterial.PLAYER_HEAD,
                XMaterial.PLAYER_WALL_HEAD,
                XMaterial.COMMAND_BLOCK,
                XMaterial.CHAIN_COMMAND_BLOCK,
                XMaterial.REPEATING_COMMAND_BLOCK,
                XMaterial.BEDROCK,
                XMaterial.BARRIER,
                XMaterial.STRUCTURE_BLOCK,
                XMaterial.STRUCTURE_VOID,
                XMaterial.LIGHT)
                .filter(XMaterial::isSupported)
                .map(XMaterial::get)
                .map(Enum::name)
                .toList();
        this.blocksToRemove = config.getList(configPath + ".blocks-to-remove", defaults)
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.exemptedWorlds = new HashSet<>(config.getList(configPath + ".exempted-worlds",
                List.of("exampleworld1", "exampleworld2")));
        this.checkPeriod = config.getInt(configPath + ".check-period-in-seconds", 10) * 20L;
        this.checkShouldPauseOnLowTPS = config.getBoolean(configPath + ".pause-on-low-TPS", false);
        this.pauseTPS = config.getDouble(configPath + ".pause-TPS", 14.0);
    }

    @Override
    public void enable() {
        scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) {
            scheduledTask.cancel();
            scheduledTask = null;
        }
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            if (exemptedWorlds.contains(world.getName())) continue;

            final int minY = world.getMinHeight();
            final int maxY = world.getMaxHeight();
            final boolean inNether = world.getEnvironment() == World.Environment.NETHER;

            for (Chunk chunk : world.getLoadedChunks()) {
                if (ChunkUtil.isRetrievalUnsafe(chunk)) continue;

                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (checkShouldPauseOnLowTPS && AnarchyExploitFixes.tickReporter().getTPS() <= pauseTPS) return;
                    if (!chunk.isEntitiesLoaded()) return;

                    for (int x = 0; x < 16; x++) {
                        for (int z = 0; z < 16; z++) {
                            for (int y = minY; y < maxY; y++) {
                                Block block = chunk.getBlock(x, y, z);
                                if (!blocksToRemove.contains(block.getType())) continue;

                                // If is bedrock, make sure not to delete naturally generated
                                if (block.getType() == XMaterial.BEDROCK.get()) {
                                    if (y > minY + 4) { // offset to not delete natural bedrock floor
                                        if (inNether) {
                                            // offset to not delete bedrock ceiling
                                            if (y < config.nether_ceiling_max_y - 5)
                                                block.setType(XMaterial.AIR.get(), false);
                                        } else {
                                            block.setType(XMaterial.AIR.get(), false);
                                        }
                                    }
                                    continue;
                                }

                                block.setType(XMaterial.AIR.get(), false);
                            }
                        }
                    }
                });
            }
        }
    }
}
