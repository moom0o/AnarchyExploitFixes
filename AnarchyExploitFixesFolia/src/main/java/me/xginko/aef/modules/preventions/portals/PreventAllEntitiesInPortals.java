package me.xginko.aef.modules.preventions.portals;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.PlatformUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.entity.EntityPortalEvent;

public class PreventAllEntitiesInPortals extends AEFModule implements Listener {

    public PreventAllEntitiesInPortals() {
        super("preventions.portals.prevent-all-entities-in-portals", false, """
                Only enable if you must. Does not affect players.
                CAUTION: Will kill the entity on folia due to broken portal event.""");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalUse(EntityPortalEvent event) { // Does not fire on folia due to broken API
        if (event.getEntityType() != XEntityType.PLAYER.get()) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!PlatformUtil.isFolia()) return; // Avoid fallback logic on non-folia

        if (event.getEntityType() != XEntityType.PLAYER.get()) {
            event.getEntity().getScheduler().execute(plugin, () -> event.getEntity().remove(), null, 1L);
        }
    }
}
