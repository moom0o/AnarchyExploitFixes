package me.moomoo.anarchyexploitfixes;

import me.moomoo.anarchyexploitfixes.misc.*;
import me.moomoo.anarchyexploitfixes.patches.*;
import me.moomoo.anarchyexploitfixes.prevention.*;
import org.bstats.bukkit.Metrics;
import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.SkullMeta;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;

import java.awt.*;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

public class Main extends JavaPlugin implements Listener {
    public static final Integer[] oldTotal = {0};
    public static final Integer[] newTotal = {0};
    public final Map<Player, Integer> newChunks = new HashMap<>();
    public final Map<Player, Integer> oldChunks = new HashMap<>();

    public final Set<String> playersInNewChunks = new HashSet<>();

    public final HashSet<String> connectionMsgs = new HashSet<>();
    public PluginManager pluginManager;

    public static void replaceEnchantment(ItemStack c, Enchantment e, Integer l) {
        ItemMeta meta = c.getItemMeta();
        meta.removeEnchant(e);
        meta.addEnchant(e, l, false);
        c.setItemMeta(meta);
    }

    @Override
    public void onEnable() {
        Logger log = getLogger();
        pluginManager = getServer().getPluginManager();
        log.info("Registering events");
        // please make a pull request if there is a better way to do this
        register(
                new DupeFixes(this), new DisableWithers(this),
                new Elytra(this), new EndPortalPatch(this),
                new Bedrock(this), new Chat(this),
                new ChunkBan(this), new CommandPreProcess(this),
                new CrashExploits(this), new Illegals(this),
                new JoinMessages(this), new Kicks(this),
                new LagExploits(this), new MyServer(this),
                new NetherRoof(this), new Redstone(this),
                new NetherPortals(this), new GodMode(this),
                new RenderDistance(this), new CoordExploits(this),
                new CommandExploits(this), new WitherSpawning(this),
                new Burrow(this), new BookBan(this)
        );
        if (getConfig().getBoolean("DisableAllProtocolLib")) {
            getLogger().info("You specified to disable all ProtocolLib patches.");
        } else {
            if (getServer().getPluginManager().getPlugin("ProtocolLib") != null) {
                getLogger().info("Detected ProtocolLib!");
                ProtocolLib.protocolLibWrapper(this);
            } else {
                getLogger().warning("Did not detect ProtocolLib, disabling packet patches");
            }
        }

        log.info("Registering events finished");
        log.info("Registering commands");
        getCommand("aef").setExecutor(new Commands(this));
        getCommand("toggleconnectionmsgs").setExecutor(new Commands(this));
        if (getConfig().getBoolean("StrictIllegalPrevention")) {
            Bukkit.getServer().getScheduler().runTaskTimer(this, () -> Bukkit.getWorlds().forEach(b -> b.getPlayers().forEach(e -> e.getInventory().forEach(this::revert))), 0L, 20L);
        }
        if (getConfig().getBoolean("RemoveAllWitherSkulls")) {
            Bukkit.getScheduler().runTaskTimer(this, () -> {
                for (World w : Bukkit.getWorlds()) {
                    for (Entity e : w.getEntities()) {
                        if (e.getType() == EntityType.WITHER_SKULL) {
                            e.remove();
                        }
                    }
                }
            }, 0L, 20L);
        }
        Bukkit.getScheduler().runTaskTimer(this, () -> {
            newTotal[0] = 0;
            oldTotal[0] = 0;
            Bukkit.getOnlinePlayers().forEach(b -> {
                if (newChunks.get(b) != null) {
                    newTotal[0] = newTotal[0] + newChunks.get(b);
                }
            });
            Bukkit.getOnlinePlayers().forEach(b -> {
                if (oldChunks.get(b) != null) {
                    oldTotal[0] = oldTotal[0] + oldChunks.get(b);
                }
            });
        }, 0L, 20L);

        if (getConfig().getBoolean("RateLimitLevers"))
            Bukkit.getScheduler().runTaskTimerAsynchronously(this, Redstone::clearLeverHashmap, 0, getConfig().getInt("RateLimitTime"));

        saveDefaultConfig();
        // Disable some config options for non 1.12 servers because they cause a shit ton of errors
        if (!getConfig().getBoolean("OverideConfigChanges")) {
            if (!Bukkit.getVersion().contains("1.12")) {
                getConfig().set("RemoveALLIllegalBlocksOnCHUNKLOAD", false);
                getConfig().set("FillInBedrockFloor", false);
                getConfig().set("FillInBedrockRoof", false);
                getConfig().set("ExperimentalDupePatch2", false);
                log.warning("Disabled:\nRemoveALLIllegalBlocksOnCHUNKLOAD\nFillInBedrockFloor\nFillInBedrockRoof\nExperimentalDupePatch2\nDue to errors with non 1.12.2 versions.");
            } else {
                getConfig().set("DisableFish", false);
                log.warning("Disabled:\nDisableFish\nbecause server is 1.12");
            }
        }
        if (getConfig().getBoolean("ExperimentalDupePatch2")) {
            Bukkit.getScheduler().runTaskTimer(this, this::preventDespawning, 0L, 20L);
        }
        log.info("[ENABLED] AnarchyExploitFixes - Made by moomoo");

        new Metrics(this, 8700);
    }

    public Integer checkChunk(Material material, Chunk c) {
        if (Bukkit.getVersion().contains("1.12") || getConfig().getBoolean("OverideConfigChanges")) {
            int count = 0;
            int cx = c.getX() << 4;
            int cz = c.getZ() << 4;

            for (int x = cx; x < cx + 16; x++) {
                for (int z = cz; z < cz + 16; z++) {
                    for (int y = 0; y < 256; y++) {
                        if (c.getBlock(x, y, z).getType() == material) {
                            count++;
                        }
                    }
                }
            }
            return count;
        }

        return 0;
    }

    public void revert(ItemStack c) {
        if (c != null) {
            if (getConfig().getBoolean("RevertStackedItems")) {
                if (getConfig().getBoolean("OnlyRevertStacksForCertainItems")) {
                    for (String s : getConfig().getStringList("RevertStackedItemsList")) {
                        if (c.getType().name().equals(s) && c.getAmount() > c.getMaxStackSize()) {
                            c.setAmount(c.getMaxStackSize());
                        }
                    }
                } else {
                    if (c.getAmount() > c.getMaxStackSize()) {
                        c.setAmount(c.getMaxStackSize());
                    }
                }
            }
            if (getConfig().getBoolean("RevertEnchantments")) {
                revertEnchantments(c);
            }
            if (getConfig().getBoolean("RemoveIllegalHeads")) {
                if (c.getType().equals(Material.SKULL_ITEM)) {
                    SkullMeta sm = (SkullMeta) c.getItemMeta();
                    if (sm.hasOwner() || c.getData().toString().equals("SKULL_ITEM(3)")) {
                        c.subtract(c.getAmount());
                    }
                }
            }
            if (getConfig().getList("BANNED_BLOCKS").contains(c.getType().name())) {
                c.subtract(c.getAmount());
            }
        }
    }

    public void revertEnchantments(ItemStack c) {
        for (Map.Entry<Enchantment, Integer> e : c.getItemMeta().getEnchants().entrySet()) {
            if (e.getValue() != null && e.getKey() != null) {
                if (getConfig().getBoolean("RevertSpecificEnchantments")) {
                    for (String s : getConfig().getStringList("SpecificEnchantments")) {
                        if (e.getValue() > e.getKey().getMaxLevel() && e.getKey().getName().contains(s)) {
                            replaceEnchantment(c, e.getKey(), e.getKey().getMaxLevel());
                        }
                    }
                } else {
                    if (e.getValue() > e.getKey().getMaxLevel()) {
                        replaceEnchantment(c, e.getKey(), e.getKey().getMaxLevel());
                    }
                }
            }
        }
    }

    public void preventDespawning() {
        for (World w : Bukkit.getWorlds()) {
            for (Entity e : w.getEntities()) {
                if (e instanceof LivingEntity) {
                    ((LivingEntity) e).setRemoveWhenFarAway(!isEntityCloseToPlayer(e));
                }
            }
        }
    }

    public boolean isEntityCloseToPlayer(Entity e) {
        for (Player p : Bukkit.getOnlinePlayers()) {
            Point p1 = new Point(p.getLocation().getBlockX(), p.getLocation().getBlockZ());
            Point p2 = new Point(e.getLocation().getBlockX(), e.getLocation().getBlockZ());
            if (p1.distance(p2) < 500) {
                return true;
            }
        }
        return false;
    }

    private void register(Listener... list) {
        pluginManager.registerEvents(this, this);
        for (Listener listener : list) {
            pluginManager.registerEvents(listener, this);
        }
    }
}
