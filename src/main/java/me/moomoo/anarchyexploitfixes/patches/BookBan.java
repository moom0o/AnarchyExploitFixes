package me.moomoo.anarchyexploitfixes.patches;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Bukkit;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicInteger;

public class BookBan implements Listener {
    private final Main plugin;
    private final Map<UUID, AtomicInteger> rejoinsInLastTenSec = new HashMap<>();

    public BookBan(Main plugin) {
        this.plugin = plugin;

        Bukkit.getScheduler().scheduleSyncRepeatingTask(plugin, rejoinsInLastTenSec::clear, 0, 10 * 20L);
    }

    public void clearBooks(Player player, boolean join) {
        if (!plugin.getConfig().getBoolean("PreventBookBan"))
            return;

        rejoinsInLastTenSec.putIfAbsent(player.getUniqueId(), new AtomicInteger());

        if (join)
            rejoinsInLastTenSec.get(player.getUniqueId()).incrementAndGet();

        if (rejoinsInLastTenSec.get(player.getUniqueId()).get() <= plugin.getConfig().getInt("RejoinsInLastTenSecToTrigger"))
            return;

        //noinspection unused
        int booksInInventory = 0;
        for (ItemStack item : player.getInventory().getContents()) {
            if (item != null && item.getType() != null) {
                if (item.getType().name().contains("BOOK")) {
                    booksInInventory++;

                    if (booksInInventory > plugin.getConfig().getInt("MaxBooksInInventory")) {
                        item.setAmount(0);
                    } else {
                        stripPages(item);
                    }
                }

                //noinspection unused
                int totalAmountOfBooksInShulker = 0;
                if (item.getType().name().contains("SHULKER_BOX")) {
                    BlockStateMeta meta = (BlockStateMeta) item.getItemMeta();
                    if (meta == null)
                        return;

                    ShulkerBox box = (ShulkerBox) meta.getBlockState();
                    if (box == null)
                        return;

                    for (ItemStack i : box.getInventory().getContents()) {
                        if (i != null && i.getType() != null && i.getType().name().contains("BOOK")) {
                            totalAmountOfBooksInShulker++;

                            if (totalAmountOfBooksInShulker > plugin.getConfig().getInt("MaxBooksInInventory")) {
                                i.setAmount(0);
                            } else {
                                stripPages(item);
                            }

                            stripPages(i);
                        }
                    }
                }
            }
        }
    }

    private void stripPages(ItemStack book) {
        BookMeta bookMeta = (BookMeta) book.getItemMeta();

        List<String> pages = bookMeta.getPages();

        int end = pages.size() - 1;

        if (end > plugin.getConfig().getInt("MaxBookPages"))
            end = plugin.getConfig().getInt("MaxBookPages") - 1;

        bookMeta.setPages(bookMeta.getPages().subList(0, end));

        book.setItemMeta(bookMeta);
    }

    @EventHandler
    public void onJoin(PlayerJoinEvent event) {
        clearBooks(event.getPlayer(), true);
    }

    @EventHandler
    public void onLeave(PlayerQuitEvent event) {
        clearBooks(event.getPlayer(), false);
    }

    @EventHandler
    public void onKick(PlayerKickEvent event) {
        clearBooks(event.getPlayer(), false);
    }
}
