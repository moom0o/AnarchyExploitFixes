package me.moomoo.anarchyexploitfixes.patches;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.Container;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.inventory.ItemStack;

public class Illegals implements Listener {
    private final Main plugin;

    public Illegals(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void onPlayerInteractEvent(PlayerInteractEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnInteract")) {
            if (evt.getClickedBlock() != null) {
                if (evt.getClickedBlock().getState() instanceof Container) {
                    if (config.getBoolean("DEBUG")) {
                        plugin.getLogger().info("PlayerInteractEvent " + evt.getClickedBlock().getType().toString());
                    }
                    for (ItemStack c : ((Container) evt.getClickedBlock().getState()).getInventory()) {
                        revertStacks(c);
                    }
                    config.getList("BANNED_BLOCKS").forEach(b -> ((Container) evt.getClickedBlock().getState()).getInventory().remove(Material.getMaterial((String) b)));
                }
            }
        }
    }

    @EventHandler
    private void onPlayerJoinEvent(PlayerJoinEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnJoin")) {
            config.getList("BANNED_BLOCKS").forEach(b -> {
                if (config.getBoolean("DEBUG")) {
                    plugin.getLogger().info("PlayerJoinEvent");
                }
                evt.getPlayer().getInventory().remove(Material.getMaterial((String) b));
            });
        }

        if (config.getBoolean("RevertStackedItems")) {
            evt.getPlayer().getInventory().forEach(this::revertStacks);
        }
    }

    @EventHandler
    private void onInventoryOpenEvent(InventoryOpenEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnInventoryOpen")) {
            config.getList("BANNED_BLOCKS").forEach(b -> {
                if (config.getBoolean("DEBUG")) {
                    plugin.getLogger().info("InventoryOpenEvent");
                }
                evt.getPlayer().getInventory().remove(Material.getMaterial((String) b));
            });
        }

        if (config.getBoolean("RevertStackedItems")) {
            evt.getPlayer().getInventory().forEach(this::revertStacks);
        }
    }

    @EventHandler
    private void onBlockDropItemEvent(PlayerDropItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("DEBUG")) {
            plugin.getLogger().info("ยง6DEBUG: " + evt.getItemDrop().getItemStack().getType().toString());
        }

        if (config.getBoolean("RemoveIllegalBlocksOnDrop")) {
            if (config.getBoolean("DEBUG")) {
                plugin.getLogger().info("PlayerDropItemEvent");
            }

            String item = evt.getItemDrop().getItemStack().getType().toString();

            if (config.getList("BANNED_BLOCKS").contains(item)) {
                evt.getItemDrop().getItemStack().setType(Material.getMaterial(config.getString("Replacement_Item")));
                evt.getPlayer().getInventory().remove(Material.BEDROCK);
                evt.setCancelled(true);
            }
        }

        if (config.getBoolean("RevertStackedItems")) {
            evt.getPlayer().getInventory().forEach(this::revertStacks);
        }
    }

    @EventHandler
    private void onChunkLoadEvent(ChunkLoadEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveALLIllegalBlocksOnCHUNKLOAD")) {
            Chunk c = evt.getChunk();

            if (!evt.isNewChunk()) {
                if (!c.getWorld().getName().equalsIgnoreCase("world_the_end")) {
                    int cx = c.getX() << 4;
                    int cz = c.getZ() << 4;
                    for (int x = cx; x < cx + 16; x++) {
                        for (int z = cz; z < cz + 16; z++) {
                            for (int y = 0; y < 128; y++) {

                                if ((config.getList("BANNED_BLOCKS").contains(c.getBlock(x, y, z).getType().toString()))) {
                                    if (y > 5) {
                                        if (evt.getChunk().getWorld().getName().equalsIgnoreCase("world_nether")) {
                                            if (y < 123) {
                                                c.getBlock(x, y, z).setType(Material.AIR);
                                                //getLogger().info("Found bedrock at " + x + " " + y + " " + z);
                                            }
                                        }
                                        if (evt.getChunk().getWorld().getName().equalsIgnoreCase("world")) {
                                            c.getBlock(x, y, z).setType(Material.AIR);
                                            //getLogger().info("Found bedrock at " + x + " " + y + " " + z);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    @EventHandler
    private void onInventoryInteractEvent(InventoryInteractEvent evt) {
        FileConfiguration config = plugin.getConfig();
        if (config.getBoolean("DEBUG")) {
            plugin.getLogger().info("InventoryInteractEvent ");
        }
        if (config.getBoolean("RemoveIllegalBlocksOnInteract")) {
            config.getList("BANNED_BLOCKS").forEach(b -> {
                if (evt.getInventory().contains(Material.getMaterial((String) b))) {
                    evt.getInventory().remove(Material.getMaterial((String) b));
                    evt.setCancelled(true);
                }
            });
        }
        if (config.getBoolean("RevertStackedItems")) {
            evt.getInventory().forEach(this::revertStacks);
        }
    }

    @EventHandler
    private void onInventoryClick(InventoryClickEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnClick")) {
            if (evt.getCurrentItem() != null) {
                String item = evt.getCurrentItem().getType().toString();

                if (config.getList("BANNED_BLOCKS").contains(item)) {
                    if (config.getBoolean("DEBUG")) {
                        plugin.getLogger().info("InventoryClickEvent " + item);
                    }
                    evt.getCurrentItem().setType(Material.getMaterial(config.getString("Replacement_Item")));
                    evt.setCancelled(true);
                }
            }
        }
        if (config.getBoolean("RevertStackedItems")) {
            evt.getWhoClicked().getInventory().forEach(this::revertStacks);
            if (evt.getCurrentItem() != null) {
                if (plugin.getConfig().getBoolean("OnlyRevertStacksForCertainItems")) {
                    for (String s : plugin.getConfig().getStringList("RevertStackedItemsList")) {
                        if (evt.getCurrentItem().getType().name().equals(s)) {
                            if (evt.getCurrentItem().getAmount() > evt.getCurrentItem().getMaxStackSize()) {
                                evt.getCurrentItem().setAmount(evt.getCurrentItem().getMaxStackSize());
                            }
                        }
                    }
                } else {
                    if (evt.getCurrentItem().getAmount() > evt.getCurrentItem().getMaxStackSize()) {
                        evt.getCurrentItem().setAmount(evt.getCurrentItem().getMaxStackSize());
                    }
                }
            }
        }
    }

    @EventHandler
    private void onInventoryPickup(InventoryPickupItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnPickup")) {
            String item = evt.getItem().getType().toString();
            if (config.getBoolean("DEBUG")) {
                plugin.getLogger().info("InventoryPickupItemEvent " + item);
            }
            if (config.getList("BANNED_BLOCKS").contains(item)) {
                evt.setCancelled(true);
            }
        }
        if (config.getBoolean("RevertStackedItems")) {
            evt.getInventory().forEach(this::revertStacks);
        }
    }

    @EventHandler
    private void onInventoryMove(InventoryMoveItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnMove")) {
            String item = evt.getItem().getType().toString();
            if (config.getList("BANNED_BLOCKS").contains(item)) {
                if (config.getBoolean("DEBUG")) {
                    plugin.getLogger().info("InventoryMoveItemEvent " + item);
                }
                evt.getItem().setType(Material.getMaterial(config.getString("Replacement_Item")));
                evt.setCancelled(true);
            }
        }
        if (config.getBoolean("RevertStackedItems")) {
            if (evt.getItem() != null) {
                if (plugin.getConfig().getBoolean("OnlyRevertStacksForCertainItems")) {
                    for (String s : plugin.getConfig().getStringList("RevertStackedItemsList")) {
                        if (evt.getItem().getType().name().equals(s)) {
                            if (evt.getItem().getAmount() > evt.getItem().getMaxStackSize()) {
                                evt.getItem().setAmount(evt.getItem().getMaxStackSize());
                            }
                        }
                    }
                } else {
                    if (evt.getItem().getAmount() > evt.getItem().getMaxStackSize()) {
                        evt.getItem().setAmount(evt.getItem().getMaxStackSize());
                    }
                }
            }
        }
    }

    @EventHandler
    private void onBlockPlace(BlockPlaceEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("PreventPlacingIllegalBlocks")) {
            String block = evt.getBlockPlaced().getType().toString();
            if (config.getList("BANNED_BLOCKS").contains(block)) {
                if (config.getBoolean("RemoveIllegalBlockOnPlace")) {
                    config.getList("BANNED_BLOCKS").forEach(b -> {
                        if (evt.getPlayer().getInventory().contains(Material.getMaterial((String) b))) {
                            evt.getPlayer().getInventory().remove(Material.getMaterial((String) b));
                            evt.setCancelled(true);
                        }
                    });
                }
                evt.setCancelled(true);
            }
            if (config.getBoolean("RevertStackedItems")) {
                evt.getPlayer().getInventory().forEach(this::revertStacks);
            }
        }
    }

    private void revertStacks(ItemStack c) {
        if (c != null) {
            if (plugin.getConfig().getBoolean("OnlyRevertStacksForCertainItems")) {
                for (String s : plugin.getConfig().getStringList("RevertStackedItemsList")) {
                    if (c.getType().name().equals(s)) {
                        if (c.getAmount() > c.getMaxStackSize()) {
                            c.setAmount(c.getMaxStackSize());
                        }
                    }
                }
            } else {
                if (c.getAmount() > c.getMaxStackSize()) {
                    c.setAmount(c.getMaxStackSize());
                }
            }
        }
    }
}
