package me.moomoo.anarchyexploitfixes.patches;

import lombok.RequiredArgsConstructor;
import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Container;
import org.bukkit.block.Skull;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.*;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.scheduler.BukkitRunnable;

@RequiredArgsConstructor
public class Illegals implements Listener {
    private final Main plugin;

    @EventHandler
    private void onPlayerInteractEvent(PlayerInteractEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnInteract")) {
            if (evt.getClickedBlock() != null) {
                if (evt.getClickedBlock().getState() instanceof Container) {
                    ((Container) evt.getClickedBlock().getState()).getInventory().forEach(plugin::revert);

                    config.getList("BANNED_BLOCKS").forEach(b -> ((Container) evt.getClickedBlock().getState()).getInventory().remove(Material.getMaterial((String) b)));
                }
            }
        }
    }

    @EventHandler
    private void onPlayerJoinEvent(PlayerJoinEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnJoin"))
            config.getStringList("BANNED_BLOCKS").forEach(b -> evt.getPlayer().getInventory().remove(Material.getMaterial(b)));

        evt.getPlayer().getInventory().forEach(plugin::revert);
    }

    @EventHandler
    private void onInventoryOpenEvent(InventoryOpenEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnInventoryOpen"))
            config.getStringList("BANNED_BLOCKS").forEach(b -> evt.getPlayer().getInventory().remove(Material.getMaterial(b)));

        evt.getPlayer().getInventory().forEach(plugin::revert);
    }

    @EventHandler
    private void onBlockDropItemEvent(PlayerDropItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnDrop"))
            plugin.revert(evt.getItemDrop().getItemStack());

        evt.getPlayer().getInventory().forEach(plugin::revert);
    }

    @EventHandler
    private void onChunkLoadEvent(ChunkLoadEvent evt) {
        if (!plugin.getConfig().getBoolean("RemoveALLIllegalBlocksOnCHUNKLOAD"))
            return;

        new Thread(() -> {
            Chunk c = evt.getChunk();

            if (!evt.isNewChunk()) {
                int cx = c.getX() << 4;
                int cz = c.getZ() << 4;

                for (int x = cx; x < cx + 16; x++) {
                    for (int z = cz; z < cz + 16; z++) {
                        for (int y = 0; y < 255; y++) {
                            if (!c.getWorld().getEnvironment().equals(World.Environment.THE_END)) {
                                if ((plugin.getConfig().getStringList("BANNED_BLOCKS").contains(c.getBlock(x, y, z).getType().toString()))) {
                                    if (y > 5) {
                                        if (evt.getChunk().getWorld().getEnvironment() == World.Environment.NETHER) {
                                            if (y < 123) {
                                                setToAir(c.getBlock(x, y, z));
                                            }
                                        }

                                        if (evt.getChunk().getWorld().getEnvironment() == World.Environment.NORMAL) {
                                            setToAir(c.getBlock(x, y, z));
                                        }
                                    }
                                }
                            }

                            if (plugin.getConfig().getBoolean("RemoveIllegalHeadsOnChunkLoad")) {
                                if (c.getBlock(x, y, z).getType() == Material.SKULL) {
                                    Skull skull = (Skull) c.getBlock(x, y, z).getState();

                                    if (skull.hasOwner() || skull.getSkullType() == SkullType.PLAYER) {
                                        setToAir(c.getBlock(x, y, z));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }).start();
    }

    @EventHandler
    private void onInventoryInteractEvent(InventoryInteractEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnInteract")) {
            config.getStringList("BANNED_BLOCKS").forEach(b -> {
                if (evt.getInventory().contains(Material.getMaterial(b))) {
                    evt.getInventory().remove(Material.getMaterial(b));
                    evt.setCancelled(true);
                }
            });
        }

        evt.getInventory().forEach(plugin::revert);
    }

    @EventHandler
    private void onInventoryClick(InventoryClickEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnClick"))
            plugin.revert(evt.getCurrentItem());

        evt.getWhoClicked().getInventory().forEach(plugin::revert);
    }

    @EventHandler
    private void onInventoryPickup(InventoryPickupItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnPickup")) {
            String item = evt.getItem().getType().toString();
            if (config.getStringList("BANNED_BLOCKS").contains(item)) {
                evt.getItem().remove();
            }
        }

        evt.getInventory().forEach(plugin::revert);
    }

    @EventHandler
    private void onInventoryMove(InventoryMoveItemEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("RemoveIllegalBlocksOnMove")) {
            plugin.revert(evt.getItem());

            evt.getSource().forEach(plugin::revert);
            evt.getDestination().forEach(plugin::revert);
        }
    }

    @EventHandler
    private void onBlockPlace(BlockPlaceEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("PreventPlacingIllegalBlocks")) {
            String block = evt.getBlockPlaced().getType().toString();

            if (config.getStringList("BANNED_BLOCKS").contains(block)) {
                if (config.getBoolean("RemoveIllegalBlockOnPlace")) {
                    config.getStringList("BANNED_BLOCKS").forEach(b -> {
                        if (evt.getPlayer().getInventory().contains(Material.getMaterial(b))) {
                            evt.getPlayer().getInventory().remove(Material.getMaterial(b));
                            evt.setCancelled(true);
                        }
                    });
                }

                evt.setCancelled(true);
            }

            evt.getPlayer().getInventory().forEach(plugin::revert);
        }
    }

    private void setToAir(final Block block) {
        new BukkitRunnable() {
            public void run() {
                if (!block.getType().equals(Material.AIR))
                    block.setType(Material.AIR);
            }
        }.runTask(plugin);
    }
}
