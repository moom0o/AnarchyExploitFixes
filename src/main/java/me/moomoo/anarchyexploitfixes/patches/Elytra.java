package me.moomoo.anarchyexploitfixes.patches;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.*;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import java.awt.*;
import java.util.HashMap;
import java.util.HashSet;

public class Elytra implements Listener {
    private final Main plugin;
    public HashSet<String> playersinnewchunks = new HashSet<>();
    public HashMap<Player, Integer> levels = new HashMap<>();

    public Elytra(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void onMove(PlayerMoveEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (config.getBoolean("DisableAllElytras")) {
            Player player = evt.getPlayer();
            PlayerInventory i = player.getInventory();
            Location l = i.getLocation();
            if (i.getChestplate() != null && i.getChestplate().getType().equals(Material.ELYTRA)) {
                ItemStack elytra = i.getChestplate();
                i.setChestplate(null);
                l.getWorld().dropItemNaturally(l, elytra);
                if (evt.getPlayer().getLocale().startsWith("es")) {
                    evt.getPlayer().sendMessage("Elytras desactivado debido a la explotación de LAG.");
                } else {
                    evt.getPlayer().sendMessage("Elytras disabled due to exploit.");
                }
            }
        }
        if (config.getBoolean("PreventGoingBelowBedrockFloorOnElytra") || config.getBoolean("PreventGoingBelowBedrockFloor")) {
            if (evt.getPlayer().getLocation().getY() < 0) {
                if (!evt.getPlayer().getWorld().getName().equalsIgnoreCase("world_the_end")) {
                    evt.getPlayer().getWorld().getBlockAt(evt.getPlayer().getLocation().getBlockX(), 0, evt.getPlayer().getLocation().getBlockZ()).setType(Material.BEDROCK);
                    evt.setTo(evt.getFrom().add(0, 2, 0));
                }
            }
        }
    }

    @EventHandler
    public void onPlayerMove(PlayerMoveEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (evt.getPlayer().isGliding()) {
            Location from = evt.getFrom();
            Location to = evt.getTo();
            double distX = to.getX() - from.getX();
            double distZ = to.getZ() - from.getZ();
            double finalValue = Math.hypot(distX, distZ);
            double tps = Bukkit.getServer().getTPS()[0];
            if (tps < config.getDouble("Elytra")) {
                Player player = evt.getPlayer();
                PlayerInventory i = player.getInventory();
                Location l = i.getLocation();
                if (evt.getPlayer().getLocale().startsWith("es")) {
                    evt.getPlayer().sendActionBar(ChatColor.DARK_RED + "Los Elytras están actualmente deshabilitados porque el tps es mas bajo que " + config.getInt("Elytra"));
                } else {
                    evt.getPlayer().sendActionBar(ChatColor.DARK_RED + "Elytras are currently disabled because the tps is lower than " + config.getInt("Elytra"));
                }
                evt.setCancelled(true);
                if (config.getBoolean("RemoveElytra")) {
                    evt.getPlayer().setGliding(false);
                    if (i.getChestplate() != null && i.getChestplate().getType().equals(Material.ELYTRA)) {
                        ItemStack elytra = i.getChestplate();
                        i.setChestplate(null);
                        l.getWorld().dropItemNaturally(l, elytra);
                    }
                }
            } else {
                if (playersinnewchunks.contains(evt.getPlayer().getName())) {
                    if (evt.getPlayer().getLocation().getY() > 127 && evt.getPlayer().getWorld().getName().equals("world_nether")) {
                        if (finalValue > 0.5) {
                            if (config.getBoolean("PreventNetherRoof")) {
                                evt.setCancelled(true);
                                if (evt.getPlayer().getLocale().startsWith("es")) {
                                    evt.getPlayer().sendMessage("Solo puedes ir en chunks viejos en el techo. Desequipa tus élitros para dejar de volar.");
                                } else {
                                    evt.getPlayer().sendMessage("You can only go in old chunks on the roof. Unequip your elytra to stop flying.");
                                }
                            }
                        }
                    } else {
                        double max_speed;
                        if (tps > plugin.config.getDouble("ElytraBurstNewChunkTPS") && plugin.config.getBoolean("EnableBursting") && (plugin.config.getDouble("ElytraBurstNewChunkSpeed") > plugin.config.getDouble("ElytraNewChunkSpeed"))) {
                            max_speed = plugin.config.getDouble("ElytraBurstNewChunkSpeed");
                        } else {
                            max_speed = plugin.config.getDouble("ElytraNewChunkSpeed");
                        }
                        if (finalValue > (max_speed + 0.02) && !evt.getPlayer().isOp()) {
                            evt.setCancelled(true);

                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Baja la configuración de tu élitro, la velocidad está restringida en nuevos chunks.");
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.RED + "Turn down your elytra settings, speed is restricted in new chunks.");
                            }

                            evt.getPlayer().playSound(evt.getPlayer().getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
                        } else {
                            if (config.getBoolean("ElytraActionBar")) {
                                if (evt.getPlayer().getLocale().startsWith("es")) {
                                    evt.getPlayer().sendActionBar(ChatColor.GRAY + "Estás volando en" + ChatColor.DARK_RED + " NUEVO" + ChatColor.GRAY + " chunks. Velocidad: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                                } else {
                                    evt.getPlayer().sendActionBar(ChatColor.GRAY + "You are flying in" + ChatColor.DARK_RED + " NEW" + ChatColor.GRAY + " chunks. Speed: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                                }
                            }
                        }
                    }
                } else {
                    double max_speed;
                    if (tps > plugin.config.getDouble("ElytraBurstOldChunkTPS") && plugin.config.getBoolean("EnableBursting") && (plugin.config.getDouble("ElytraBurstOldChunkSpeed") > plugin.config.getDouble("ElytraOldChunkSpeed"))) {
                        max_speed = plugin.config.getDouble("ElytraBurstOldChunkSpeed");
                    } else {
                        max_speed = plugin.config.getDouble("ElytraOldChunkSpeed");
                    }
                    if (finalValue > (max_speed + 0.02) && !evt.getPlayer().isOp()) {
                        evt.setCancelled(true);
                        if (evt.getPlayer().getLocale().startsWith("es")) {
                            evt.getPlayer().sendActionBar(ChatColor.RED + "Baja la configuración de tu elytra, vas demasiado rápido.");
                        } else {
                            evt.getPlayer().sendActionBar(ChatColor.RED + "Turn down your elytra settings, you are going too fast.");
                        }
                        evt.getPlayer().playSound(evt.getPlayer().getLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
                    } else {
                        if (config.getBoolean("ElytraActionBar")) {
                            if (evt.getPlayer().getLocale().startsWith("es")) {
                                evt.getPlayer().sendActionBar(ChatColor.GRAY + "Estás volando en" + ChatColor.GREEN + " ANTIGUO" + ChatColor.GRAY + " chunks. Velocidad: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                            } else {
                                evt.getPlayer().sendActionBar(ChatColor.GRAY + "You are flying in" + ChatColor.GREEN + " OLD" + ChatColor.GRAY + " chunks. Speed: " + (String.format("%.2f", Math.min((double) Math.round(finalValue * 100.0D) / 100.0D, 20.0D)) + ChatColor.DARK_GRAY + " / " + ChatColor.GRAY + max_speed));
                            }
                        }
                    }
                }
            }
        }
    }

    @EventHandler
    public void onChunkLoad(ChunkLoadEvent evt) {
        FileConfiguration config = plugin.getConfig();

        if (evt.isNewChunk()) {
            for (Player p : Bukkit.getOnlinePlayers()) {
                Point p1 = new Point(evt.getChunk().getX(), evt.getChunk().getZ());
                Point p2 = new Point(p.getLocation().getChunk().getX(), p.getLocation().getChunk().getZ());

                if (p1.distance(p2) < 100) {
                    playersinnewchunks.add(p.getName());
                    if (config.getBoolean("ChunksCommand")) {
                        plugin.newChunks.merge(p, 1, Integer::sum);
                        Bukkit.getScheduler().runTaskLater(plugin, () -> plugin.newChunks.merge(p, -1, Integer::sum), 20L);
                    }
                }
            }
        } else {
            for (Player p : Bukkit.getOnlinePlayers()) {
                Point p1 = new Point(evt.getChunk().getX(), evt.getChunk().getZ());
                Point p2 = new Point(p.getLocation().getChunk().getX(), p.getLocation().getChunk().getZ());

                if (p1.distance(p2) < 100) {
                    playersinnewchunks.remove(p.getName());
                    if (config.getBoolean("ChunksCommand")) {
                        plugin.oldChunks.merge(p, 1, Integer::sum);
                        Bukkit.getScheduler().runTaskLater(plugin, () -> plugin.oldChunks.merge(p, -1, Integer::sum), 20L);
                    }
                }
            }
        }
        if (config.getBoolean("RemoveSkullsOnChunkLoad")) {
            for (Entity e : evt.getChunk().getEntities()) {
                if (e.getType() == EntityType.WITHER_SKULL) {
                    e.remove();
                }
            }
        }
    }

    @EventHandler
    public void onOpen(EntityToggleGlideEvent evt) {
        if (plugin.config.getBoolean("PatchPacketElytraFly")) {
            PlayerInventory i = ((Player) evt.getEntity()).getInventory();
            if (evt.getEntity() instanceof Player) {
                Player e = (Player) evt.getEntity();
                if (levels.get(e) != null) {
                    if (levels.get(e) > plugin.config.getInt("MaxElytraOpensPer10Seconds")) {
                        if (i.getChestplate() != null && i.getChestplate().getType().equals(Material.ELYTRA)) {
                            ItemStack elytra = i.getChestplate();
                            i.setChestplate(null);
                            evt.getEntity().getWorld().dropItemNaturally(i.getLocation(), elytra);
                        }
                    } else {
                        levels.merge(e, 1, Integer::sum);
                        Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> levels.put(e, levels.get(e) - 1), 200L);
                    }
                } else {
                    levels.put(e, 1);
                    Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> levels.put(e, levels.get(e) - 1), 200L);
                }
            }
        }
    }
}
