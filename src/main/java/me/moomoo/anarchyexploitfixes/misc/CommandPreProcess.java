package me.moomoo.anarchyexploitfixes.misc;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;

import java.awt.*;

public class CommandPreProcess implements Listener {
    private final Main plugin;

    public CommandPreProcess(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onCommandPreprocess(PlayerCommandPreprocessEvent evt) {
        FileConfiguration config = plugin.getConfig();

        String msg = evt.getMessage().toLowerCase();
        if (evt.getMessage().equalsIgnoreCase("/aef")) {
            evt.getPlayer().sendMessage(ChatColor.GOLD + "This server is running AnarchyExploitFixes v" + plugin.getDescription().getVersion());
            evt.setCancelled(true);
        }
        if (evt.getMessage().equalsIgnoreCase("/newchunks")) {
            plugin.getServer().getOnlinePlayers().forEach(b -> evt.getPlayer().sendMessage(b.getName() + ": " + plugin.newChunks.get(b)));
            evt.setCancelled(true);
        }
        if (evt.getMessage().equalsIgnoreCase("/oldchunks")) {
            plugin.getServer().getOnlinePlayers().forEach(b -> evt.getPlayer().sendMessage(b.getName() + ": " + plugin.oldChunks.get(b)));
            evt.setCancelled(true);
        }

        if (evt.getMessage().equalsIgnoreCase("/ignore")) {
            if (config.getBoolean("FixChatcoIgnoreBug")) {
                if (evt.getPlayer().getLocale().startsWith("es")) {
                    evt.getPlayer().sendMessage("§cNo agregaste un nombre de jugador....");
                } else {
                    evt.getPlayer().sendMessage("§cYou didn't add a player name....");
                }
                evt.setCancelled(true);
            }
        }
        if (config.getBoolean("FixWorldStatsCommandBug")) {
            if (evt.getMessage().equalsIgnoreCase("/stats")) {
                evt.getPlayer().performCommand("worldstats");
                evt.setCancelled(true);
            }
        }
        if (config.getBoolean("playercommand")) {
            if (evt.getMessage().equalsIgnoreCase("/geared")) {
                StringBuilder geared = new StringBuilder();
                StringBuilder newplayer = new StringBuilder();
                Integer geared_int = 0;
                Integer newplayer_int = 0;
                for (Player c : Bukkit.getServer().getOnlinePlayers()) {
                    if (c.getInventory().getChestplate() != null || c.getInventory().getBoots() != null || c.getInventory().getHelmet() != null || c.getInventory().getLeggings() != null) {
                        geared.append(c.getName()).append(", ");
                        geared_int++;
                    } else {
                        newplayer.append(c.getName()).append(", ");
                        newplayer_int++;
                    }
                }
                evt.getPlayer().sendMessage("Geared players: " + ChatColor.GOLD + geared + ChatColor.WHITE + " (" + geared_int + ")");
                evt.getPlayer().sendMessage("Naked players: " + ChatColor.GOLD + newplayer + ChatColor.WHITE + " (" + newplayer_int + ")");
                evt.getPlayer().sendMessage("Total players: " + ChatColor.GOLD + (newplayer_int + geared_int));
                evt.setCancelled(true);
            }
        }
        if (config.getBoolean("playercommand")) {
            if (evt.getMessage().startsWith("/elytra")) {
                StringBuilder flying = new StringBuilder();
                StringBuilder notflying = new StringBuilder();
                Integer flyint = 0;
                Integer noflyint = 0;

                for (Player c : Bukkit.getServer().getOnlinePlayers()) {
                    if (c.isGliding()) {
                        flying.append(c.getName()).append(", ");
                        flyint++;
                    } else {
                        notflying.append(c.getName()).append(", ");
                        noflyint++;
                    }
                }

                evt.getPlayer().sendMessage("Flying on elytra: " + ChatColor.GOLD + flying + ChatColor.WHITE + " (" + flyint + ")");
                evt.getPlayer().sendMessage("Not flying on elytra: " + ChatColor.GOLD + notflying + ChatColor.WHITE + " (" + noflyint + ")");
                evt.getPlayer().sendMessage("Total players: " + ChatColor.GOLD + (flyint + noflyint));
                evt.setCancelled(true);
            }
        }
        if (evt.getMessage().equalsIgnoreCase("/tps")) {
            if (config.getBoolean("UseSparkhealth")) {
                evt.getPlayer().performCommand("spark health");
                evt.setCancelled(true);
                Bukkit.getServer().getScheduler().runTaskLater(plugin, () -> {
                    if (evt.getPlayer().getLocale().startsWith("es")) {
                        evt.getPlayer().sendMessage(ChatColor.GRAY + "Este no es el tamaño mundial, para el tipo /stats de tamaño mundial");
                    } else {
                        evt.getPlayer().sendMessage(ChatColor.GRAY + "This is not the world size, for world size type /stats");
                    }
                }, 10L);
            }
        }
        if (evt.getMessage().toLowerCase().startsWith("/nick")) {
            if (config.getBoolean("nickresetonly")) {
                if (!evt.getMessage().equalsIgnoreCase("/nick off")) {
                    if (evt.getPlayer().getLocale().startsWith("es")) {
                        evt.getPlayer().sendMessage("§3No puedes cambiar tu nick pero puedes restablecerlo escribiendo /nick off si tienes un nick viejo!");
                    } else {
                        evt.getPlayer().sendMessage("§3You can't change your nick but you may reset it by typing /nick off if you have a legacy nick!");
                    }
                    evt.setCancelled(true);
                }
            }
        }
        if (evt.getMessage().toLowerCase().startsWith("/tpa ") || evt.getMessage().equalsIgnoreCase("/tpa") || evt.getMessage().toLowerCase().startsWith("/tpahere") || evt.getMessage().toLowerCase().startsWith("/call") || evt.getMessage().toLowerCase().startsWith("/ecall") || evt.getMessage().toLowerCase().startsWith("/etpa") || evt.getMessage().toLowerCase().startsWith("/tpask") || evt.getMessage().toLowerCase().startsWith("/etpask")) {
            if (config.getBoolean("5000blocksawaytoteleport")) {
                if (!evt.getPlayer().getWorld().getName().equalsIgnoreCase("world_the_end")) {
                    Point p1 = new Point(evt.getPlayer().getLocation().getBlockX(), evt.getPlayer().getLocation().getBlockZ());
                    Point p2 = new Point(0, 0);
                    if (p1.distance(p2) < 5000) {
                        if (evt.getPlayer().getLocale().startsWith("es")) {
                            evt.getPlayer().sendMessage("§3Necesitas ser 5000 cuadras de spawn para teletransportarse!");
                        } else {
                            evt.getPlayer().sendMessage("§3You need to be 5000 blocks away from spawn to teleport!");
                        }
                        evt.setCancelled(true);
                    }
                }
            }
        }
        if (config.getBoolean("AllowOPStobypass")) {
            if (!config.getList("CommandsWhitelisted").contains(msg.split(" ")[0])) {
                if (config.getBoolean("CommandWhitelist")) {
                    if (!evt.getPlayer().isOp()) {
                        if (evt.getPlayer().getLocale().startsWith("es")) {
                            evt.getPlayer().sendMessage("§4Mal comando. Tipo /help para todos los comandos.");
                        } else {
                            evt.getPlayer().sendMessage("§4Bad command. Type /help for all commands.");
                        }
                        evt.setCancelled(true);
                    }
                }
            }
        } else {
            if (!config.getList("CommandsWhitelisted").contains(msg.split(" ")[0])) {
                if (config.getBoolean("CommandWhitelist")) {
                    if (evt.getPlayer().getLocale().startsWith("es")) {
                        evt.getPlayer().sendMessage("§4Mal comando. Tipo /help para todos los comandos.");
                    } else {
                        evt.getPlayer().sendMessage("§4Bad command. Type /help for all commands.");
                    }

                    evt.setCancelled(true);
                }
            }
        }
    }
}
