package me.xginko.aef.commands;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.tree.CommandNode;
import com.mojang.brigadier.tree.RootCommandNode;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.SimpleCommandMap;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;
/*
* Straight up yoinked from https://github.com/Test-Account666/PlugManX
* (Stinky reflections, but it does the job)
* */
public final class BukkitCommandWrap {
    private static BukkitCommandWrap instance;

    private final boolean nmsVersioning;
    private String nmsVersion;
    private Class<?> minecraftServerClass;
    private Method getServerMethod, syncCommandsMethod, removeCommandMethod;
    private Field bField, vanillaCommandDispatcherField, commandMapField, knownCommandsField;

    public BukkitCommandWrap() {
        String prefix = getCraftBukkitPrefix();
        String[] packageParts = prefix.split("\\.");
        String versionPart = packageParts[packageParts.length - 1];
        if (versionPart.startsWith("v1_")) {
            nmsVersion = versionPart;
        }
        boolean nmsVers = true;
        try {
            Class.forName("net.minecraft.server.MinecraftServer");
            nmsVers = false;
        } catch (ClassNotFoundException ignore) {}
        nmsVersioning = nmsVers;
    }

    public static BukkitCommandWrap getInstance() {
        if (instance == null) {
            instance = new BukkitCommandWrap();
        }
        return instance;
    }

    private static @NotNull String getCraftBukkitPrefix() {
        return Bukkit.getServer().getClass().getPackage().getName();
    }

    public static @NotNull String getCraftBukkitPrefix(String cbClassName) {
        return getCraftBukkitPrefix() + "." + cbClassName;
    }

    private @NotNull String getNetMinecraftServerPrefix(String nmsClassName) {
        if (nmsVersioning) return "net.minecraft.server." + nmsVersion + "." + nmsClassName;
        return "net.minecraft.server." + nmsClassName;
    }

    private boolean resolveSyncCommandsMethod() {
        if (syncCommandsMethod != null) return true;

        try {
            syncCommandsMethod = Class.forName(getCraftBukkitPrefix("CraftServer")).getDeclaredMethod("syncCommands");
            syncCommandsMethod.setAccessible(true);
            return true;
        } catch (NoSuchMethodException | ClassNotFoundException e) {
            return false;
        }
    }

    private boolean fetchCommandMapField() {
        if (commandMapField != null) return true;
        try {
            commandMapField = Class.forName(getCraftBukkitPrefix("CraftServer")).getDeclaredField("commandMap");
            commandMapField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException | ClassNotFoundException e) {
            return false;
        }
    }

    private boolean fetchKnownCommandsField() {
        if (knownCommandsField != null) return true;

        try {
            knownCommandsField = SimpleCommandMap.class.getDeclaredField("knownCommands");
            knownCommandsField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException e) {
            return false;
        }
    }

    public void setKnownCommands(Map<String, Command> knownCommands) {
        if (!fetchCommandMapField()) return;

        SimpleCommandMap commandMap;
        try {
            commandMap = (SimpleCommandMap) commandMapField.get(Bukkit.getServer());
        } catch (Exception e) {
            return;
        }

        if (!fetchKnownCommandsField()) return;

        try {
            knownCommandsField.set(commandMap, knownCommands);
        } catch (IllegalAccessException ignored) {
        }
    }

    public void sync() {
        if (!resolveSyncCommandsMethod()) return;

        try {
            syncCommandsMethod.invoke(Bukkit.getServer());
        } catch (IllegalAccessException | InvocationTargetException ignored) {
        }

        for (Player player : Bukkit.getOnlinePlayers()) {
            player.updateCommands();
        }
    }

    public void unwrap(String command) {
        if (nmsVersion == null) return;

        if (!resolveMinecraftServerClass()) return;

        if (!resolveGetServerMethod()) return;
        Object server = getServerInstance();

        if (!resolveVanillaCommandDispatcherField()) return;
        Object commandDispatcher = getCommandDispatcher(server);

        if (!resolveBField()) return;

        CommandDispatcher<?> dispatcher = getDispatcher(commandDispatcher);
        if (dispatcher == null) return;

        if (!resolveRemoveCommandMethod()) return;

        try {
            removeCommandMethod.invoke(dispatcher.getRoot(), command);
        } catch (IllegalAccessException | InvocationTargetException ignored) {
        }
    }

    private boolean resolveRemoveCommandMethod() {
        if (removeCommandMethod == null) try {
            try {
                removeCommandMethod = RootCommandNode.class.getDeclaredMethod("removeCommand", String.class);
            } catch (NoSuchMethodException | NoSuchMethodError ex) {
                removeCommandMethod = CommandNode.class.getDeclaredMethod("removeCommand", String.class);
            }
            return true;
        } catch (NoSuchMethodException e) {
            return false;
        }
        return true;
    }

    private @Nullable CommandDispatcher<?> getDispatcher(Object commandDispatcher) {
        try {
            return (CommandDispatcher<?>) bField.get(commandDispatcher);
        } catch (IllegalAccessException e) {
            return null;
        }
    }

    private @Nullable Object getCommandDispatcher(Object server) {
        try {
            return vanillaCommandDispatcherField.get(server);
        } catch (IllegalAccessException e) {
            return null;
        }
    }

    private Object getServerInstance() {
        try {
            return getServerMethod.invoke(minecraftServerClass);
        } catch (IllegalAccessException | InvocationTargetException e) {
            return null;
        }
    }

    private boolean resolveMinecraftServerClass() {
        if (minecraftServerClass != null) return true;
        try {
            minecraftServerClass = Class.forName(getNetMinecraftServerPrefix("MinecraftServer"));
            return true;
        } catch (ClassNotFoundException ex) {
            return false;
        }
    }

    private boolean resolveGetServerMethod() {
        if (getServerMethod != null) return true;
        try {
            getServerMethod = minecraftServerClass.getMethod("getServer");
            getServerMethod.setAccessible(true);
            return true;
        } catch (NoSuchMethodException e) {
            return false;
        }
    }

    private boolean resolveVanillaCommandDispatcherField() {
        if (vanillaCommandDispatcherField != null) return true;
        try {
            vanillaCommandDispatcherField = minecraftServerClass.getDeclaredField("vanillaCommandDispatcher");
            vanillaCommandDispatcherField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException e) {
            return false;
        }
    }

    private boolean resolveBField() {
        if (bField != null) return true;
        try {
            bField = Class.forName(getNetMinecraftServerPrefix("CommandDispatcher")).getDeclaredField("b");
            bField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException | ClassNotFoundException e) {
            try {
                Class<?> commandDispatcher = Class.forName("net.minecraft.commands.CommandDispatcher");
                Field gField = commandDispatcher.getDeclaredField("g");
                bField = gField.getType() == CommandDispatcher.class ? gField : commandDispatcher.getDeclaredField("h");
                bField.setAccessible(true);
                return true;
            } catch (NoSuchFieldException | ClassNotFoundException ex) {
                return false;
            }
        }
    }
}
