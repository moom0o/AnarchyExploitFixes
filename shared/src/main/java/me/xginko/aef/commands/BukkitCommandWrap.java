package me.xginko.aef.commands;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.tree.CommandNode;
import com.mojang.brigadier.tree.RootCommandNode;
import org.bukkit.Bukkit;
import org.bukkit.command.Command;
import org.bukkit.command.SimpleCommandMap;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Map;
/*
* Straight up yoinked from https://github.com/Test-Account666/PlugManX
* (Stinky reflections, but it does the job)
* */
public final class BukkitCommandWrap {
    private static BukkitCommandWrap instance;

    private final boolean nmsVersioning;
    private String nmsVersion;
    private Class minecraftServerClass;
    private Method getServerMethod, syncCommandsMethod, removeCommandMethod;
    private Field bField, vanillaCommandDispatcherField, commandMapField, knownCommandsField;

    public BukkitCommandWrap() {
        String prefix = getCraftBukkitPrefix();
        String[] packageParts = prefix.split("\\.");
        String versionPart = packageParts[packageParts.length - 1];
        if (versionPart.startsWith("v1_")) {
            this.nmsVersion = versionPart;
        }
        boolean nmsVers = true;
        try {
            Class.forName("net.minecraft.server.MinecraftServer");
            nmsVers = false;
        } catch (ClassNotFoundException ignore) {}
        this.nmsVersioning = nmsVers;
    }

    public static BukkitCommandWrap getInstance() {
        if (instance == null) {
            instance = new BukkitCommandWrap();
        }
        return instance;
    }

    private static @NotNull String getCraftBukkitPrefix() {
        return Bukkit.getServer().getClass().getPackage().getName();
    }

    public static @NotNull String getCraftBukkitPrefix(String cbClassName) {
        return getCraftBukkitPrefix() + "." + cbClassName;
    }

    private @NotNull String getNetMinecraftServerPrefix(String nmsClassName) {
        if (this.nmsVersioning) return "net.minecraft.server." + this.nmsVersion + "." + nmsClassName;
        return "net.minecraft.server." + nmsClassName;
    }

    private boolean resolveSyncCommandsMethod() {
        if (this.syncCommandsMethod != null) return true;

        try {
            this.syncCommandsMethod = Class.forName(getCraftBukkitPrefix("CraftServer")).getDeclaredMethod("syncCommands");
            this.syncCommandsMethod.setAccessible(true);
            return true;
        } catch (NoSuchMethodException | ClassNotFoundException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean fetchCommandMapField() {
        if (this.commandMapField != null) return true;
        try {
            this.commandMapField = Class.forName(getCraftBukkitPrefix("CraftServer")).getDeclaredField("commandMap");
            this.commandMapField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException | ClassNotFoundException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean fetchKnownCommandsField() {
        if (this.knownCommandsField != null) return true;

        try {
            this.knownCommandsField = SimpleCommandMap.class.getDeclaredField("knownCommands");
            this.knownCommandsField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
            return false;
        }
    }

    public void setKnownCommands(Map<String, Command> knownCommands) {
        if (!this.fetchCommandMapField())
            throw new RuntimeException("Cannot find command map");

        SimpleCommandMap commandMap;
        try {
            commandMap = (SimpleCommandMap) this.commandMapField.get(Bukkit.getServer());
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }

        if (!this.fetchKnownCommandsField())
            throw new RuntimeException("Unable to find known commands");

        try {
            this.knownCommandsField.set(commandMap, knownCommands);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
    }

    public void sync() {
        if (!this.resolveSyncCommandsMethod()) return;

        try {
            this.syncCommandsMethod.invoke(Bukkit.getServer());
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }

        if (Bukkit.getOnlinePlayers().isEmpty()) return;

        Bukkit.getOnlinePlayers().forEach(Player::updateCommands);
    }

    public void unwrap(String command) {
        if (this.nmsVersion == null) return;

        if (!this.resolveMinecraftServerClass()) return;

        if (!this.resolveGetServerMethod()) return;
        Object server = this.getServerInstance();

        if (!this.resolveVanillaCommandDispatcherField()) return;
        Object commandDispatcher = this.getCommandDispatcher(server);

        if (!this.resolveBField()) return;

        CommandDispatcher b = this.getDispatcher(commandDispatcher);
        if (b == null) return;

        if (!this.resolveRemoveCommandMethod()) return;

        try {
            this.removeCommandMethod.invoke(b.getRoot(), command);
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
        }
    }

    private boolean resolveRemoveCommandMethod() {
        if (this.removeCommandMethod == null) try {
            try {
                this.removeCommandMethod = RootCommandNode.class.getDeclaredMethod("removeCommand", String.class);
            } catch (NoSuchMethodException | NoSuchMethodError ex) {
                this.removeCommandMethod = CommandNode.class.getDeclaredMethod("removeCommand", String.class);
            }
            return true;
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    private @Nullable CommandDispatcher getDispatcher(Object commandDispatcher) {
        try {
            return (CommandDispatcher) this.bField.get(commandDispatcher);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    private @Nullable Object getCommandDispatcher(Object server) {
        try {
            return this.vanillaCommandDispatcherField.get(server);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    private Object getServerInstance() {
        try {
            return this.getServerMethod.invoke(this.minecraftServerClass);
        } catch (IllegalAccessException | InvocationTargetException e) {
            e.printStackTrace();
            return null;
        }
    }

    private boolean resolveMinecraftServerClass() {
        if (this.minecraftServerClass != null) return true;
        try {
            this.minecraftServerClass = Class.forName(this.getNetMinecraftServerPrefix("MinecraftServer"));
            return true;
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
            return false;
        }
    }

    private boolean resolveGetServerMethod() {
        if (this.getServerMethod != null) return true;
        try {
            this.getServerMethod = this.minecraftServerClass.getMethod("getServer");
            this.getServerMethod.setAccessible(true);
            return true;
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean resolveVanillaCommandDispatcherField() {
        if (this.vanillaCommandDispatcherField != null) return true;
        try {
            this.vanillaCommandDispatcherField = this.minecraftServerClass.getDeclaredField("vanillaCommandDispatcher");
            this.vanillaCommandDispatcherField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean resolveBField() {
        if (this.bField != null) return true;
        try {
            this.bField = Class.forName(this.getNetMinecraftServerPrefix("CommandDispatcher")).getDeclaredField("b");
            this.bField.setAccessible(true);
            return true;
        } catch (NoSuchFieldException | ClassNotFoundException e) {
            try {
                Class<?> clazz = Class.forName("net.minecraft.commands.CommandDispatcher");
                Field gField = clazz.getDeclaredField("g");
                if (gField.getType() == CommandDispatcher.class)
                    this.bField = gField;
                else
                    this.bField = clazz.getDeclaredField("h");
                this.bField.setAccessible(true);
                return true;
            } catch (NoSuchFieldException | ClassNotFoundException ex) {
                ex.addSuppressed(e);
                e.printStackTrace();
                return false;
            }
        }
    }

}
