package me.xginko.aef.utils.tickdata;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import io.papermc.lib.PaperLib;
import me.xginko.aef.utils.models.Disableable;
import org.bukkit.Server;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitTask;

import java.time.Duration;
import java.util.Arrays;

@SuppressWarnings("DataFlowIssue")
public final class LegacyPaperTickReporter implements TickReporter {

    private final Server server;
    private final Cache<Boolean, Double> cache;
    private final MSPTGetter msptGetter;

    public LegacyPaperTickReporter(JavaPlugin plugin, Duration cacheDuration) {
        this.server = plugin.getServer();
        this.cache = Caffeine.newBuilder().expireAfterWrite(cacheDuration).build();
        this.msptGetter = PaperLib.getMinecraftVersion() <= 12 ? new v_1_12_and_lower(plugin) : new v_1_13_and_later(plugin);
    }

    public static boolean isSupported() {
        try {
            Server.class.getMethod("getTPS");
            return true;
        } catch (NoSuchMethodException e) {
            return false;
        }
    }

    @Override
    public void disable() {
        cache.cleanUp();
        msptGetter.disable();
    }

    /**
     * Gets the current server TPS
     *
     * @return the TPS of the last 1m in Paper-Server
     */
    @Override
    public double getGlobalTPS() {
        return cache.get(true, k -> server.getTPS()[0]);
    }

    @Override
    public double getTPS() {
        return getGlobalTPS();
    }

    /**
     * Get the average tick time of the last 5s (in millis)
     *
     * @return Average tick time (in millis)
     */
    @Override
    public double getGlobalMSPT() {
        return msptGetter.getAverageTickTime();
    }

    @Override
    public double getMSPT() {
        return getGlobalMSPT();
    }

    private interface MSPTGetter extends Disableable {
        double getAverageTickTime();
    }

    private static class v_1_13_and_later implements MSPTGetter, Listener {

        private long startTickNanoTime;
        private final long[] times5s;

        public v_1_13_and_later(JavaPlugin plugin) {
            times5s = new long[100];
            Arrays.fill(times5s, 0);
            plugin.getServer().getPluginManager().registerEvents(this, plugin);
        }

        @Override
        public void disable() {
            HandlerList.unregisterAll(this);
        }

        @EventHandler(priority = EventPriority.MONITOR)
        private void onServerTickStart(com.destroystokyo.paper.event.server.ServerTickStartEvent event) {
            startTickNanoTime = System.nanoTime();
        }

        @EventHandler(priority = EventPriority.MONITOR)
        private void onServerTickEnd(com.destroystokyo.paper.event.server.ServerTickEndEvent event) {
            times5s[event.getTickNumber() % times5s.length] = System.nanoTime() - startTickNanoTime;
        }

        @Override
        public double getAverageTickTime() {
            long total = 0L;
            for (long value : times5s) {
                total += value;
            }
            return ((double) total / (double) times5s.length) * 1.0E-6D;
        }
    }

    public static class v_1_12_and_lower implements MSPTGetter, Runnable {

        private final BukkitTask tickTask;
        private final long[] times5s;
        private int tickIndex = 0;

        public v_1_12_and_lower(JavaPlugin plugin) {
            times5s = new long[100];
            Arrays.fill(times5s, 0);
            tickTask = plugin.getServer().getScheduler().runTaskTimer(plugin, this, 0L, 1L);
        }

        @Override
        public void disable() {
            tickTask.cancel();
        }

        @Override
        public void run() {
            times5s[tickIndex] = System.nanoTime();
            tickIndex = (tickIndex + 1) % 100;
        }

        @Override
        public double getAverageTickTime() {
            int targetIndex = (tickIndex - 1) % 100;
            double elapsed = (System.nanoTime() - times5s[targetIndex]) / 100.0;
            return elapsed / 1E6;
        }
    }
}