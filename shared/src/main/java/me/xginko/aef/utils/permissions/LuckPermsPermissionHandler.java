package me.xginko.aef.utils.permissions;

import me.xginko.aef.utils.Crafty;
import me.xginko.aef.utils.enums.TriState;
import net.luckperms.api.LuckPerms;
import net.luckperms.api.model.user.User;
import net.luckperms.api.node.Node;
import org.bukkit.command.CommandSender;
import org.bukkit.plugin.java.JavaPlugin;

public final class LuckPermsPermissionHandler implements PermissionHandler {

    private final LuckPerms luckPerms;

    public LuckPermsPermissionHandler(JavaPlugin plugin) {
        luckPerms = plugin.getServer().getServicesManager().getRegistration(LuckPerms.class).getProvider();
    }

    public static boolean isSupported(JavaPlugin plugin) {
        Class<?> luckPermsApi = Crafty.findClass("net.luckperms.api.LuckPerms");
        return luckPermsApi != null && plugin.getServer().getServicesManager().getRegistration(luckPermsApi) != null;
    }

    @Override
    public TriState permissionValue(CommandSender commandSender, String permission) {
        switch (luckPerms.getPlayerAdapter(CommandSender.class).getUser(commandSender).getCachedData().getPermissionData()
                .checkPermission(permission)) {
            case TRUE:
                return TriState.TRUE;
            case FALSE:
                return TriState.FALSE;
            case UNDEFINED:
                return TriState.UNDEFINED;
            default:
                throw new IllegalArgumentException();
        }
    }

    @Override
    public void setPermission(CommandSender commandSender, String permission, TriState state) {
        User luckPermsUser = luckPerms.getPlayerAdapter(CommandSender.class).getUser(commandSender);
        if (state == TriState.UNDEFINED) {
            luckPermsUser.data().remove(Node.builder(permission).build());
        } else {
            luckPermsUser.data().add(Node.builder(permission).value(state.toBoolean()).build());
        }
        luckPerms.getUserManager().saveUser(luckPermsUser);
    }
}
