package me.xginko.aef.utils.permissions;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.utils.Crafty;
import me.xginko.aef.utils.enums.TriState;
import net.luckperms.api.LuckPerms;
import net.luckperms.api.model.user.User;
import net.luckperms.api.node.Node;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.permissions.PermissionAttachmentInfo;
import org.bukkit.plugin.java.JavaPlugin;

import java.time.Duration;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public final class LuckPermsPermissionHandler implements PermissionHandler {

    private final LuckPerms luckPerms;
    private final Map<CommandSender, Cache<String, TriState>> permissionCacheMap;
    private final Duration permissionCacheDuration;

    LuckPermsPermissionHandler(JavaPlugin plugin) {
        permissionCacheDuration = Duration.ofSeconds(5);
        permissionCacheMap = new ConcurrentHashMap<>();
        luckPerms = plugin.getServer().getServicesManager().getRegistration(LuckPerms.class).getProvider();
    }

    public static boolean isSupported(JavaPlugin plugin) {
        Class<?> luckPermsApi = Crafty.findClass("net.luckperms.api.LuckPerms");
        return luckPermsApi != null && plugin.getServer().getServicesManager().getRegistration(luckPermsApi) != null;
    }

    @Override
    public TriState permissionValue(CommandSender commandSender, String permission) {
        if (commandSender instanceof Player) {
            switch (luckPerms.getPlayerAdapter(Player.class).getUser((Player) commandSender).getCachedData().getPermissionData()
                    .checkPermission(permission)) {
                case TRUE:
                    return TriState.TRUE;
                case FALSE:
                    return TriState.FALSE;
                default:
                    return TriState.UNDEFINED;
            }
        } else {
            Cache<String, TriState> permCache = permissionCacheMap.computeIfAbsent(commandSender, sender ->
                    Caffeine.newBuilder().expireAfterWrite(permissionCacheDuration).build());
            TriState value = permCache.getIfPresent(permission);
            if (value == null) {
                value = commandSender.isPermissionSet(permission) ? TriState.of(commandSender.hasPermission(permission)) : TriState.UNDEFINED;
                permCache.put(permission, value);
            }
            return value;
        }
    }

    @Override
    public void setPermission(CommandSender commandSender, String permission, TriState state) {
        if (commandSender instanceof Player) {
            User luckPermsUser = luckPerms.getPlayerAdapter(Player.class).getUser((Player) commandSender);
            if (state == TriState.UNDEFINED) {
                luckPermsUser.data().remove(Node.builder(permission).build());
            } else {
                luckPermsUser.data().add(Node.builder(permission).value(state.toBoolean()).build());
            }
            luckPerms.getUserManager().saveUser(luckPermsUser);
            return;
        }

        for (PermissionAttachmentInfo attachmentInfo : commandSender.getEffectivePermissions()) {
            if (attachmentInfo.getAttachment() == null) {
                continue;
            }

            if (attachmentInfo.getPermission().equals(permission)) {
                if (state == TriState.UNDEFINED) {
                    commandSender.removeAttachment(attachmentInfo.getAttachment());
                } else {
                    commandSender.addAttachment(attachmentInfo.getAttachment().getPlugin(), permission, state.toBoolean());
                }
            }
        }
    }
}
