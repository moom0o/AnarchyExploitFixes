package me.xginko.aef.utils;

import de.tr7zw.changeme.nbtapi.NBTItem;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BookMeta;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.nio.charset.StandardCharsets;

public class ItemUtil {

    private static final boolean miniMessage_supported;

    static {
        boolean supported = true;
        try {
            Class.forName("net.kyori.adventure.text.minimessage.MiniMessage");
            MiniMessage.class.getMethod("miniMessage");
        } catch (Throwable t) {
            supported = false;
        }
        miniMessage_supported = supported;
    }

    public static @Nullable Iterable<ItemStack> getStoredItems(@NotNull ItemStack itemStack) {
        if (!itemStack.hasItemMeta())
            return null;
        if (MaterialUtil.INVENTORY_HOLDER_ITEMS.contains(itemStack.getType())) {
            BlockStateMeta blockStateMeta = (BlockStateMeta) itemStack.getItemMeta();
            if (blockStateMeta.hasBlockState())
                return ((InventoryHolder) blockStateMeta.getBlockState()).getInventory();
        }
        return BundleUtil.isSupported() ? BundleUtil.getItems(itemStack) : null;
    }

    public static int getApproximateByteSize(@Nullable ItemStack itemStack, boolean utf16) {
        if (itemStack == null || !itemStack.hasItemMeta())
            return 0;
        Iterable<ItemStack> stored = getStoredItems(itemStack);
        if (stored != null) {
            return getApproximateByteSize(stored, utf16);
        }
        if (MaterialUtil.TEXT_BOOKS.contains(itemStack.getType())) {
            return getApproximateByteSize((BookMeta) itemStack.getItemMeta(), utf16);
        }
        return new NBTItem(itemStack).toString().getBytes(utf16 ? StandardCharsets.UTF_16 : StandardCharsets.UTF_8).length;
    }

    public static int getApproximateByteSize(@Nullable Iterable<ItemStack> inventory, boolean utf16) {
        if (inventory == null)
            return 0;
        int collectiveSize = 0;
        for (ItemStack stack : inventory) {
            collectiveSize += getApproximateByteSize(stack, utf16);
        }
        return collectiveSize;
    }

    public static int getApproximateByteSize(@NotNull BookMeta bookMeta, boolean utf16) {
        return miniMessage_supported ? getApproximateByteSizeMM(bookMeta, utf16) : getApproximateByteSizeLegacy(bookMeta, utf16);
    }

    @SuppressWarnings("DataFlowIssue") // Legitimate because we make sure no values are null by testing .hasX()
    private static int getApproximateByteSizeMM(@NotNull BookMeta bookMeta, boolean utf16) {
        StringBuilder content = new StringBuilder();
        if (bookMeta.hasTitle())
            content.append(MiniMessage.miniMessage().serialize(bookMeta.title()));
        if (bookMeta.hasAuthor())
            content.append(MiniMessage.miniMessage().serialize(bookMeta.author()));
        if (bookMeta.hasPages()) {
            for (Component page : bookMeta.pages())
                content.append(MiniMessage.miniMessage().serialize(page));
        }
        if (bookMeta.hasLore()) {
            for (Component loreLine : bookMeta.lore())
                content.append(MiniMessage.miniMessage().serialize(loreLine));
        }
        return content.toString().getBytes(utf16 ? StandardCharsets.UTF_16 : StandardCharsets.UTF_8).length;
    }

    private static int getApproximateByteSizeLegacy(@NotNull BookMeta bookMeta, boolean utf16) {
        StringBuilder content = new StringBuilder();
        if (bookMeta.hasTitle())
            content.append(bookMeta.getTitle());
        if (bookMeta.hasAuthor())
            content.append(bookMeta.getAuthor());
        if (bookMeta.hasPages())
            bookMeta.getPages().forEach(content::append);
        if (bookMeta.hasLore())
            bookMeta.getLore().forEach(content::append);
        return content.toString().getBytes(utf16 ? StandardCharsets.UTF_16 : StandardCharsets.UTF_8).length;
    }
}
