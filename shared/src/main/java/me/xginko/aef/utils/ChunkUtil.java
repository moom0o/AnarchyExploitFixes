package me.xginko.aef.utils;

import com.cryptomorin.xseries.XMaterial;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.util.NumberConversions;

public final class ChunkUtil {

    private static final boolean SET_FORCE_LOADED_AVAILABLE, GET_INHABITED_TIME_AVAILABLE,
            IS_ENTITIES_LOADED_AVAILABLE;

    static {
        SET_FORCE_LOADED_AVAILABLE
                =   Crafty.hasMethod(Chunk.class, "setForceLoaded", boolean.class);
        GET_INHABITED_TIME_AVAILABLE
                =   Crafty.hasMethod(Chunk.class, "getInhabitedTime");
        IS_ENTITIES_LOADED_AVAILABLE
                =   Crafty.hasMethod(Chunk.class, "isEntitiesLoaded");
    }

    public static boolean canSetChunksForceLoaded() {
        return SET_FORCE_LOADED_AVAILABLE;
    }

    public static void setForceLoaded(Chunk chunk, boolean forced) {
        if (SET_FORCE_LOADED_AVAILABLE) {
            chunk.setForceLoaded(forced);
        }
    }

    public static boolean canGetInhabitedTime() {
        return GET_INHABITED_TIME_AVAILABLE;
    }

    public static long getInhabitedTime(Chunk chunk) {
        return GET_INHABITED_TIME_AVAILABLE ? chunk.getInhabitedTime() : 0L;
    }

    // If any chunk coord is outside 30 million blocks, paper will warn about dangerous chunk retrieval
    public static boolean isRetrievalUnsafe(Chunk chunk) {
        return chunk.getX() > 1875000 || chunk.getZ() > 1875000 || chunk.getX() < -1875000 || chunk.getZ() < -1875000;
    }

    public static boolean isEntitiesLoaded(Chunk chunk) {
        return IS_ENTITIES_LOADED_AVAILABLE ? chunk.isEntitiesLoaded() : chunk.isLoaded();
    }

    public static void createBedrockLayer(Chunk chunk, int y) {
        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                if (chunk.getBlock(x, y, z).getType() != XMaterial.BEDROCK.parseMaterial()) {
                    // prevent physics to avoid loading nearby chunks which causes infinite chunk loading loops
                    chunk.getBlock(x, y, z).setType(XMaterial.BEDROCK.parseMaterial(), false);
                }
            }
        }
    }

    public static double getChunkDistanceSquared(Chunk chunk1, Chunk chunk2) {
        return  NumberConversions.square(chunk1.getX() - chunk2.getX()) +
                NumberConversions.square(chunk1.getZ() - chunk2.getZ());
    }

    public static double getChunkDistanceSquared(Chunk chunk, Location location) {
        return  NumberConversions.square(chunk.getX() - (location.getBlockX() >> 4)) +
                NumberConversions.square(chunk.getZ() - (location.getBlockZ() >> 4));
    }

    public static double getChunkDistanceSquared(Location location1, Location location2) {
        return  NumberConversions.square((location1.getBlockX() >> 4) - (location2.getBlockX() >> 4)) +
                NumberConversions.square((location1.getBlockZ() >> 4) - (location2.getBlockZ() >> 4));
    }
}
