package me.xginko.aef.utils;

import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.util.NumberConversions;

public class ChunkUtil {

    private static boolean setForceLoadedAvailable, getInhabitedTimeAvailable;

    static {
        try {
            Chunk.class.getMethod("setForceLoaded", boolean.class);
            setForceLoadedAvailable = true;
        } catch (NoSuchMethodException e) {
            setForceLoadedAvailable = false;
        }

        try {
            Chunk.class.getMethod("getInhabitedTime");
            getInhabitedTimeAvailable = true;
        } catch (NoSuchMethodException e) {
            getInhabitedTimeAvailable = false;
        }
    }

    public static boolean canSetChunksForceLoaded() {
        return setForceLoadedAvailable;
    }

    public static void setForceLoaded(Chunk chunk, boolean forced) {
        if (setForceLoadedAvailable) {
            chunk.setForceLoaded(forced);
        }
    }

    public static boolean canGetInhabitedTime() {
        return getInhabitedTimeAvailable;
    }

    public static long getInhabitedTime(Chunk chunk) {
        return getInhabitedTimeAvailable ? chunk.getInhabitedTime() : 0L;
    }

    public static void createBedrockLayer(Chunk chunk, int y) {
        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                if (chunk.getBlock(x, y, z).getType() != Material.BEDROCK) {
                    // prevent physics to avoid loading nearby chunks which causes infinite chunk loading loops
                    chunk.getBlock(x, y, z).setType(Material.BEDROCK, false);
                }
            }
        }
    }

    public static double getChunkDistanceSquared(Chunk chunk1, Chunk chunk2) {
        return  NumberConversions.square(chunk1.getX() - chunk2.getX()) +
                NumberConversions.square(chunk1.getZ() - chunk2.getZ());
    }

    public static double getChunkDistanceSquared(Chunk chunk, Location location) {
        return  NumberConversions.square(chunk.getX() - (location.getBlockX() >> 4)) +
                NumberConversions.square(chunk.getZ() - (location.getBlockZ() >> 4));
    }

    public static double getChunkDistanceSquared(Location location1, Location location2) {
        return  NumberConversions.square((location1.getBlockX() >> 4) - (location2.getBlockX() >> 4)) +
                NumberConversions.square((location1.getBlockX() >> 4) - (location2.getBlockZ() >> 4));
    }
}
